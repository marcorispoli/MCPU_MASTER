.TH "VerticalMotor" 3 "Thu May 2 2024" "MCPU_MASTER Software Description" \" -*- nroff -*-
.ad l
.nh
.SH NAME
VerticalMotor \- This is the Vertical Module class implementation 

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <VerticalMotor\&.h>\fP
.PP
Inherits \fBCANOPEN::CanOpenMotor\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVerticalMotor\fP (void)"
.br
.RI "This is the class constructor\&.  "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBactivateIsocentricCorrection\fP (int id, int delta_target)"
.br
.RI "This command activates the isocentric correction\&. "
.ti -1c
.RI "static bool \fBstartManualHoming\fP (int target_position)"
.br
.ti -1c
.RI "static bool \fBstartAutoHoming\fP ()"
.br
.RI "This function activates the Automatic Homing procedure "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBVerticalMotor\fP ^ \fBdevice\fP = gcnew \fBVerticalMotor\fP()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "unsigned short \fBinitializeSpecificObjectDictionaryCallback\fP (void) override"
.br
.RI "Sets specific registers for the Arm activation\&. "
.ti -1c
.RI "\fBMotorCompletedCodes\fP \fBpreparationCallback\fP (\fBMotorCommands\fP \fBcurrent_command\fP, int current_position, int target_position) override"
.br
.RI "This function is called just before to set the speed: if return true, the speed is set to the predefined value\&. "
.ti -1c
.RI "\fBMotorCompletedCodes\fP \fBrunningCallback\fP (\fBMotorCommands\fP \fBcurrent_command\fP, int current_position, int target_position) override"
.br
.RI "This function is called just before to Power the motor phases\&. "
.ti -1c
.RI "\fBMotorCompletedCodes\fP \fBidleCallback\fP (void) override"
.br
.RI "The module overrides this function in order to handle the IDLE activities "
.ti -1c
.RI "void \fBfaultCallback\fP (bool errstat, bool data_changed, unsigned int \fBerror_class\fP, unsigned int \fBerror_code\fP) override"
.br
.ti -1c
.RI "void \fBcompletedCallback\fP (int id, \fBMotorCommands\fP \fBcurrent_command\fP, int current_position, \fBMotorCompletedCodes\fP term_code) override"
.br
.RI "This function is called just before to Power the motor phases\&. "
.ti -1c
.RI "void \fBtestLimitSwitch\fP (void)"
.br
.RI "True if the limit switch is engaged\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "bool \fBhigh_photocell\fP"
.br
.ti -1c
.RI "bool \fBlow_photocell\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static bool \fBmanual_increment_direction\fP = false"
.br
.RI "Sets true if the increment manual command is executing, false if the decrement manual activation is executing\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This is the Vertical Module class implementation
.SH "Constructor & Destructor Documentation"
.PP 
.SS "VerticalMotor::VerticalMotor (void)"

.PP
This is the class constructor\&.  The Constructor:
.IP "\(bu" 2
Initializes the CanOpenMotor base class:
.IP "  \(bu" 4
Set the motor address;
.IP "  \(bu" 4
Set The module name;
.IP "  \(bu" 4
Set The unit conversion coefficient
.PP

.IP "\(bu" 2
Set the target acceptable precision range;
.IP "\(bu" 2
Initializes the encoder initial position from the configuration file;
.PP

.SH "Member Function Documentation"
.PP 
.SS "bool VerticalMotor::activateIsocentricCorrection (int id, int delta_h)\fC [static]\fP"

.PP
This command activates the isocentric correction\&. This function activates the Isocentric correction procedure\&. 
.PP
The Isocentric procedure corrects the actual vertical position of the ARM, when a C-ARM rotation command is executed\&.
.PP
The command activates an automatic positioning where the target is expressed in terms of position variation and not as an absolute target\&.
.PP
The activation command makes use of the following activation parameters:
.IP "\(bu" 2
Speed: \fBMotorConfig::PARAM_AUTO_SPEED\fP;
.IP "\(bu" 2
Acceleration: \fBMotorConfig::PARAM_AUTO_ACC\fP;
.IP "\(bu" 2
Deceleration: \fBMotorConfig::PARAM_AUTO_DEC\fP;
.PP
.PP
\fBParameters\fP
.RS 4
\fIid\fP the requesting command ID to be finally signaled 
.br
\fIdelta_h\fP position variation
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "void VerticalMotor::completedCallback (int id, \fBMotorCommands\fP current_command, int current_position, \fBMotorCompletedCodes\fP term_code)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
This function is called just before to Power the motor phases\&. 
.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "void VerticalMotor::faultCallback (bool errstat, bool data_changed, unsigned int error_class, unsigned int error_code)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "\fBVerticalMotor::MotorCompletedCodes\fP VerticalMotor::idleCallback (void)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
The module overrides this function in order to handle the IDLE activities In idle state, the module test limit switches verifying that both cannot be in active status at the same time\&.
.PP
\fBReturns\fP
.RS 4
.IP "\(bu" 2
\fBMotorCompletedCodes::COMMAND_PROCEED\fP: a command can be processed;
.IP "\(bu" 2
Other values: a command cannot be processed due to a number of the reason\&.
.PP
.PP
.RE
.PP

.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "unsigned short VerticalMotor::initializeSpecificObjectDictionaryCallback (void)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Sets specific registers for the Arm activation\&. 
.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "\fBVerticalMotor::MotorCompletedCodes\fP VerticalMotor::preparationCallback (\fBMotorCommands\fP current_command, int current_position, int target_position)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
This function is called just before to set the speed: if return true, the speed is set to the predefined value\&. 
.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "\fBVerticalMotor::MotorCompletedCodes\fP VerticalMotor::runningCallback (\fBMotorCommands\fP current_command, int current_position, int target_position)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
This function is called just before to Power the motor phases\&. 
.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "bool VerticalMotor::startAutoHoming (void)\fC [static]\fP"

.PP
This function activates the Automatic Homing procedure The procedure makes use of the following activation parameters:
.IP "\(bu" 2
Speed: \fBMotorConfig::PARAM_HOME_SPEED\fP;
.IP "\(bu" 2
Acceleration and Deceleration: \fBMotorConfig::PARAM_HOME_ACC\fP;
.PP
.PP
\fBReturns\fP
.RS 4
true: the command is processing
.RE
.PP

.SS "bool VerticalMotor::startManualHoming (int target_position)\fC [static]\fP"

.SS "void VerticalMotor::testLimitSwitch (void)\fC [protected]\fP"

.PP
True if the limit switch is engaged\&. This function test high and low limit switches\&. 
.PP
The status of the internal variables high_photocell and low_photocell sre assigned after the function is called\&.
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBVerticalMotor\fP ^ VerticalMotor::device = gcnew \fBVerticalMotor\fP()\fC [static]\fP"

.SS "bool VerticalMotor::high_photocell\fC [protected]\fP"

.SS "bool VerticalMotor::low_photocell\fC [protected]\fP"

.SS "bool VerticalMotor::manual_increment_direction = false\fC [static]\fP, \fC [private]\fP"

.PP
Sets true if the increment manual command is executing, false if the decrement manual activation is executing\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU_MASTER Software Description from the source code\&.
