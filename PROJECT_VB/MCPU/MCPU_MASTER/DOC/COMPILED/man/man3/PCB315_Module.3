.TH "PCB315_Module" 3 "Thu Nov 16 2023" "MCPU_MASTER Software Description" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PCB315_Module \- PCB315 Module: filter selection and tube temperature control
.PP
 \- This module implements the functions of the Filter device  

.SH SYNOPSIS
.br
.PP
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBProtocol Implementation\fP"
.br
.RI "This section implements the internal module data and structures in order to implement the protocol detail specifications related to the \fBPCB315\fP board\&. "
.ti -1c
.RI "\fBInternal implementation section\fP"
.br
.ti -1c
.RI "\fBApplication Interface\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBPCB315\fP"
.br
.RI "This class implements the functions of the \fBPCB315\fP Module "
.in -1c
.SH "Detailed Description"
.PP 
This module implements the functions of the Filter device 


.IP "\(bu" 2
Filter selection;
.IP "\(bu" 2
Mirror and collimation light activation;
.IP "\(bu" 2
Tube temperature monitoring;
.PP
.PP
The module implements the Device Communication protocol to communicate with the \fBPCB315\fP device through the CAN bus\&.
.PP
In order to implement the protocol, the module inherits the \fBCanDeviceProtocol\fP class as the base class\&.
.PP
The module overrides the configurationLoop() routine of the Base class in order to writes the initialization Parameters and Data Registers as needed\&.
.br
 The routine is automatically called by the Base class after system startup or always after a device reset event\&.
.PP
This module overrides the runningLoop() rotine of the base class in order to implement the device specific functions\&.
.PP
As soon as the module class is Instantiated, the constructor will call the Base class constructor\&.
.br
The Base class constructor, through the CAN Driver module, tries to connect the Board Device getting the Bootloader and Application revision codes\&.
.PP
When the Device connection is established and the Board Device firmware revision is acquired,
.br
the Base class calls the configurationLoop() routine (overridden in this module),
.br
in order to let the module to upload and store the Device Parameters and the deviice DATA registers\&.
.br
In detail, the moudule in the configurationLoop() routine:
.PP
.IP "\(bu" 2
Uploads the Filter assignment parameter;
.IP "\(bu" 2
Uploads the Filters and Mirror calibrated positions;
.IP "\(bu" 2
The Light Timeout
.PP
.PP
When the configuration fase termines, the module runs the runningLoop() routine (overridden from the Base class),
.br
to handle the normal workflow\&.
.SH "Application Interface"
.PP
The module provides the following Application interface:
.PP
.IP "\(bu" 2
setFilterAutoMode(): this function sets the Auto mode\&. The filter is assigned by the Exposure pulse setting
.IP "\(bu" 2
setFilterManualMode(): this function sets the Manual mode\&. The filter is assigned manually
.IP "\(bu" 2
setMirrorMode(): this function sets the Mirror mode\&. The Filter device activate the MIRROR for collimation test
.IP "\(bu" 2
getPowerLightStatus(): this function returnrs the current status of the collimation light;
.IP "\(bu" 2
getStator(): this function returnrs the % of the Stator cumulated energy;
.IP "\(bu" 2
getBulb(): this function returnrs the % of the Bulb cumulated energy;
.IP "\(bu" 2
getAnode(): this function returnrs the % of the Anode cumulated energy;
.IP "\(bu" 2
isTubeAlarm(): this function returns the temperature alarm status;
.IP "\(bu" 2
getFilterFromTag(): this function returns the Filter selection code from the String code;
.IP "\(bu" 2
getTagFromFilter(): this function returns the fiter name (tag) of the Filter selection code;
.PP
.SH "Filter and Mirror Selection management"
.PP
The module allows the Application to select one of the following filter operating mode
.PP
.IP "\(bu" 2
AUTO-FILTER mode;
.IP "\(bu" 2
MANUAL-FILTER mode;
.IP "\(bu" 2
MIRROR mode;
.PP
.SS "AUTO-FILTER Mode"
The Auto filter mode should be selected for the Exposure settings\&.
.PP
If the Application should select the AUTO Filter mode,
.br
the Module will force the Filter device to select the FILTER assigned to the Auto mode\&.
.PP
The module will try at least five times to set the requested filter, repeating the command in case of selection should fail\&. 
.br
If all the attempts should fail a non resettable error condition will be activated and the Filter selection will be disabled\&.
.PP
The Application can select the Auto Mode in two different ways:
.IP "\(bu" 2
setFilterAutoMode(filter): activates the Auto mode, selecting what filter shall be used in Auto mode;
.IP "\(bu" 2
setFilterAutoMode(): activates the AUTO mode but making use of the already selected Auto filter;
.PP
.PP
The function with the filter passed as the parameter should be used by the Module that is responsible
.br
to set the exposure filter;
.PP
The function without the parameter should be used by the module controlling the exposure workflow,
.br
in order to be sure that the Auto filter (already selected) be the actual filter (nor the mirror or manual filter)\&.
.SS "MANUAL-FILTER Mode"
If the Application should select the MANAUL Filter mode,
.br
the Module will force the Filter device to select the FILTER assigned to the Manual mode\&.
.PP
The module will try at least five times to set the requested filter, repeating the command in case of selection should fail\&. 
.br
If all the attempts should fail a non resettable error condition will be activated and the Filter selection will be disabled\&.
.PP
A sthe Auto mode, also the manual mode can be selected with two functions:
.IP "\(bu" 2
setFilterManualMode(filter): activates the manual mode, selecting what filter shall be used in Manual mode;
.IP "\(bu" 2
setFilterManaulMode(): activates the Manual mode but making use of the already selected Manaul filter;
.PP
.PP
The purpose of the Manual mode is to override any Auto filter in case of calibration/Test scenario\&.
.SS "MIRROR Mode"
If the Application should select the MIRROR mode,
.br
the Module will force the Filter device to select the MIRROR\&.
.PP
When the Mirror is selected the power light automatically will be activated for a given timeout\&. 
.PP
.nf
NOTE: the current Manual filter and Auto Filter are not overridden\&.

.fi
.PP
 The Application can activate the Mirror mode with the following interface function:
.IP "\(bu" 2
setMirrorMode();
.PP
.PP
The Mirror mode should be activated by the Application when the collimation light shall be used in order to help the patient positioning during compression
.br
or when a collimation test shall be performed\&.
.SS "FILTER SELECTION CODES AND TAGS"
The Application can select one of the following Filters:
.IP "\(bu" 2
Ag;
.IP "\(bu" 2
Rh;
.IP "\(bu" 2
Al;
.IP "\(bu" 2
Cu;
.IP "\(bu" 2
Mo;
.PP
.PP
The selection can be made either by String name or by Enumeration code\&.
.PP
.IP "\(bu" 2
Enumeration codes: see the filterMaterialCodes enum class definition;
.IP "\(bu" 2
The String names (used by the AWS interface) are:
.IP "  \(bu" 4
'Ag';
.IP "  \(bu" 4
'Rh';
.IP "  \(bu" 4
'Al';
.IP "  \(bu" 4
'Cu';
.IP "  \(bu" 4
'Mo';
.PP

.IP "\(bu" 2
usually the AWS module uses the filter string name (see the AWS protocol specification);
.IP "\(bu" 2
usually the internal modules uses the filterMaterialCodes enumeration class;
.PP
.PP
There are two convenient functions to convert the code into its respective name and vice versa:
.IP "\(bu" 2
getFilterFromTag(String name): returns the filter code from the Filter string name;
.IP "\(bu" 2
getTagFromFilter(filterMaterialCodes filter_code): returns the string name from the filter code\&.
.PP
.SS "FILTER ASSIGNMENT TO THE FILTER SLOT"
The Filter Device can select only four possible slots\&.
.br
The name of the Slots are FILTER1, FILTER2, FILTER3, FILTER4\&.
.br
 The phisical positions of the slots are described in the Hardware specification document of the \fBPCB315\fP board\&.
.PP
The FilterConfig file assignes the slots to the Material Filters\&.
.PP
For example, it can be assigned:
.IP "\(bu" 2
The Filter 'Ag' to the FILTER1 slot;
.IP "\(bu" 2
The Filter 'Al' to the FILTER2 slot;
.IP "\(bu" 2
The Filter 'Rh' to the FILTER3 slot;
.IP "\(bu" 2
The Filter 'Cu' to the FILTER4 slot; In that example, the filter 'Mo' shall be NOT assigned to prevent errors even if it can be reassigned to any of the possible slots\&.
.PP
.PP
See the FilterConfig class section for details\&.
.SH "Tube Temperature Monitoring"
.PP
The Filter device reads the Tube internal sensors positioned near the Rotating Anode Stator (Stator sensor) and the Cathode Filament (Bulb sensor) \&.
.br
Both Cathode Filament and Anode Stator are equipped with internal thermocouple protections
.br
that open at about 105 C, to protect the integrity of the X-RAY Tube\&.
.PP
The firmware of the \fBPCB315\fP board will monitor the sensors in order to prevent the hardware activation
.br
of the internal protection (105C), protecting the X-Ray tube from early aging or longer 
.br
stop due to the protection reset required time\&.
.PP
The Module periodically acquires the current temperature value of the sensors and provides 
.br
its value to the Application in percent respect the maximum allowable temperature:
.IP "\(bu" 2
0%: the temperature is < 20C;
.IP "\(bu" 2
100%: the temperature is >= 105C
.PP
.PP
The Module monitors the sensor values detecting possible fault conditions:
.IP "\(bu" 2
Low Fault condition: the sensor value is < 0C (possible sensor disconnected condition)
.IP "\(bu" 2
Short Fault condition: the sensor value is > 120C (possible sensor or cable shorted) NOTE: in the case of faults, the percentage of the sensor is set to 0%!
.PP
.PP
In case the monitored temperature should exceed the 90C (but lower than 120C)
.br
a High Temperature Warning is reported\&. IMPORTANT: this Warning is not a Fault, because it should depends by an intense use of the X-RAY Tube\&.
.SH "FANCOIL control"
.PP
\&.\&.\&. To be implemented
.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU_MASTER Software Description from the source code\&.
