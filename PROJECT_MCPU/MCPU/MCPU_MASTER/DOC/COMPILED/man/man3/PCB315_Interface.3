.TH "PCB315_Interface" 3 "Wed May 29 2024" "MCPU_MASTER Software Description" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PCB315_Interface \- Application Interface
.SH SYNOPSIS
.br
.PP
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum class \fBPCB315::filterMaterialCodes\fP { \fBPCB315::filterMaterialCodes::FILTER_DEFAULT\fP =0, \fBPCB315::filterMaterialCodes::FILTER_AG\fP, \fBPCB315::filterMaterialCodes::FILTER_AL\fP, \fBPCB315::filterMaterialCodes::FILTER_MO\fP, \fBPCB315::filterMaterialCodes::FILTER_RH\fP, \fBPCB315::filterMaterialCodes::FILTER_CU\fP, \fBPCB315::filterMaterialCodes::FILTER_LEN\fP, \fBPCB315::filterMaterialCodes::FILTER_INVALID\fP = FILTER_LEN }"
.br
.RI "This is the enumeration class defining the possible selectable filters "
.ti -1c
.RI "enum class \fBPCB315::filterWorkingMode\fP { \fBPCB315::filterWorkingMode::FILTER_AUTO_MODE\fP = 0, \fBPCB315::filterWorkingMode::FILTER_MANUAL_MODE\fP, \fBPCB315::filterWorkingMode::FILTER_MIRROR_MODE\fP }"
.br
.RI "This enumeration class defines the possibles filter working modes "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBPCB315::PCB315\fP ()"
.br
.RI "\fBPCB315\fP Class constructor\&. "
.in -1c
.in +1c
.ti -1c
.RI "static \fBcomponent_options\fP \fBPCB315::getComponent\fP (void)"
.br
.ti -1c
.RI "static unsigned char \fBPCB315::getStator\fP (void)"
.br
.RI "This function returns the current Stator temperature in Percent "
.ti -1c
.RI "static unsigned char \fBPCB315::getBulb\fP (void)"
.br
.RI "This function returns the current Bulb temperature in Percent "
.ti -1c
.RI "static unsigned char \fBPCB315::getAnode\fP (void)"
.br
.RI "This function returns the current Anode cumulated HU in percent "
.ti -1c
.RI "static bool \fBPCB315::isTubeAlarm\fP (void)"
.br
.RI "This function provides a quick info about the Temperature alarm active irrespective of which alarm is actually present (stator, bulb or anode) "
.ti -1c
.RI "static \fBfilterMaterialCodes\fP \fBPCB315::getFilterFromTag\fP (System::String^ filter_tag)"
.br
.RI "Returns the Filter selection code\&. "
.ti -1c
.RI "static System::String ^ \fBPCB315::getTagFromFilter\fP (\fBfilterMaterialCodes\fP filter)"
.br
.RI "Returns the Filter name\&. "
.ti -1c
.RI "static bool \fBPCB315::setFilterAutoMode\fP (\fBfilterMaterialCodes\fP code, bool wait_completion)"
.br
.RI "This function sets the Auto mode, assigning the filter to be selected\&. "
.ti -1c
.RI "static void \fBPCB315::setFilterAutoMode\fP (void)"
.br
.RI "This function acctivates the auto mode: the selected filter has been already set\&. "
.ti -1c
.RI "static void \fBPCB315::setFilterManualMode\fP (\fBfilterMaterialCodes\fP code)"
.br
.RI "This function activates the manaul mode assigning the filter to be selected\&. "
.ti -1c
.RI "static void \fBPCB315::setFilterManualMode\fP (void)"
.br
.RI "This function activates the manaul mode: the filter shall be already set\&. "
.ti -1c
.RI "static void \fBPCB315::setMirrorMode\fP (bool request_power_light)"
.br
.RI "This function activates the Mirror Mode and the light (if requested) "
.ti -1c
.RI "static bool \fBPCB315::waitForValidFilter\fP (void)"
.br
.RI "This function waits that a valid filter is selected\&. "
.ti -1c
.RI "static bool \fBPCB315::getPowerLightStatus\fP (void)"
.br
.RI "This function returns the current status of the Power light  "
.ti -1c
.RI "static bool \fBPCB315::isValidFilterSelected\fP (void)"
.br
.ti -1c
.RI "static bool \fBPCB315::isFilterFault\fP (void)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Enumeration Type Documentation"
.PP 
.SS "enum class \fBPCB315::filterMaterialCodes\fP\fC [strong]\fP"

.PP
This is the enumeration class defining the possible selectable filters The FILTER_DEFAULT is a special selection code that
.br
 causes a selection of a filter defined into the FilterCalibraiton file\&.
.PP
The Module set this value at the system startup to provide an initial Filter selection\&.
.PP
The Application should use this selection whenever an initial state should be applied\&.
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFILTER_DEFAULT \fP\fP
This is a default filter set in the FilterCalibration configuration file\&. 
.TP
\fB\fIFILTER_AG \fP\fP
Ag Application selection option\&. 
.TP
\fB\fIFILTER_AL \fP\fP
Al Application selection option\&. 
.TP
\fB\fIFILTER_MO \fP\fP
Mo Application selection option\&. 
.TP
\fB\fIFILTER_RH \fP\fP
Rh Application selection option\&. 
.TP
\fB\fIFILTER_CU \fP\fP
Cu Application selection option 
.br
 
.TP
\fB\fIFILTER_LEN \fP\fP
Reserved for internal usage\&. 
.TP
\fB\fIFILTER_INVALID \fP\fP
Reserved for internal usage\&. 
.SS "enum class \fBPCB315::filterWorkingMode\fP\fC [strong]\fP"

.PP
This enumeration class defines the possibles filter working modes 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFILTER_AUTO_MODE \fP\fP
The filter is selected by the aws for the exposure mode\&. 
.TP
\fB\fIFILTER_MANUAL_MODE \fP\fP
The filter is selected manually\&. 
.TP
\fB\fIFILTER_MIRROR_MODE \fP\fP
The Mirror shall be selected\&. 
.SH "Function Documentation"
.PP 
.SS "static unsigned char PCB315::getAnode (void)\fC [inline]\fP, \fC [static]\fP"

.PP
This function returns the current Anode cumulated HU in percent 
.PP
\fBReturns\fP
.RS 4
The percent of the Anode cumulated HU
.RE
.PP

.SS "static unsigned char PCB315::getBulb (void)\fC [inline]\fP, \fC [static]\fP"

.PP
This function returns the current Bulb temperature in Percent The Percent value is calculated:
.IP "\(bu" 2
0%: the temperature is < 20°;
.IP "\(bu" 2
100%: the temperature is >= 105°
.PP
Note: in case of fault, this value is 0
.PP
.PP
\fBReturns\fP
.RS 4
The percent of the Bulb temperature
.RE
.PP

.SS "static \fBcomponent_options\fP PCB315::getComponent (void)\fC [inline]\fP, \fC [static]\fP"

.SS "\fBPCB315::filterMaterialCodes\fP PCB315::getFilterFromTag (System::String^ filter_tag)\fC [static]\fP"

.PP
Returns the Filter selection code\&. This is a convenient function to convert the Material Filter name to the Enumeration code\&.
.PP
The current implemented filter names are:
.IP "\(bu" 2
'Ag'
.IP "\(bu" 2
'Al'
.IP "\(bu" 2
'Rh'
.IP "\(bu" 2
'Cu'
.IP "\(bu" 2
'Mo'
.PP
.PP
\fBParameters\fP
.RS 4
\fIfilter_tag\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "static bool PCB315::getPowerLightStatus (void)\fC [inline]\fP, \fC [static]\fP"

.PP
This function returns the current status of the Power light  
.PP
\fBReturns\fP
.RS 4
true if the power light is currently ON
.RE
.PP

.SS "static unsigned char PCB315::getStator (void)\fC [inline]\fP, \fC [static]\fP"

.PP
This function returns the current Stator temperature in Percent The Percent value is calculated:
.IP "\(bu" 2
0%: the temperature is < 20°;
.IP "\(bu" 2
100%: the temperature is >= 105°
.PP
Note: in case of fault, this value is 0
.PP
.PP
\fBReturns\fP
.RS 4
The percent of the Stator temperature
.RE
.PP

.SS "System::String PCB315::getTagFromFilter (\fBfilterMaterialCodes\fP filter)\fC [static]\fP"

.PP
Returns the Filter name\&. This is a convenient function to convert the Filter Enumeration code to the Filter Material name\&.
.PP
The current implemented filter names are:
.IP "\(bu" 2
'Ag'
.IP "\(bu" 2
'Al'
.IP "\(bu" 2
'Rh'
.IP "\(bu" 2
'Cu'
.IP "\(bu" 2
'Mo'
.IP "\(bu" 2
'UNDEF' for invalid codes
.PP
.PP
\fBParameters\fP
.RS 4
\fIfilter_tag\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "static bool PCB315::isFilterFault (void)\fC [inline]\fP, \fC [static]\fP"

.SS "static bool PCB315::isTubeAlarm (void)\fC [inline]\fP, \fC [static]\fP"

.PP
This function provides a quick info about the Temperature alarm active irrespective of which alarm is actually present (stator, bulb or anode) ///  
.PP
\fBReturns\fP
.RS 4
The alarm condition due to temperature
.RE
.PP

.br
 
.SS "static bool PCB315::isValidFilterSelected (void)\fC [inline]\fP, \fC [static]\fP"

.SS "PCB315::PCB315 ()\fC [inline]\fP"

.PP
\fBPCB315\fP Class constructor\&. The construction initializes several internal variables\&. The constructor call the base class setting the address of the controlled device\&.
.PP
As soon as the base class is initialized, the communication process starts and the device is initialized with \fBconfigurationLoop()\fP routine\&.
.SS "bool PCB315::setFilterAutoMode (\fBfilterMaterialCodes\fP code, bool wait_completion)\fC [static]\fP"

.PP
This function sets the Auto mode, assigning the filter to be selected\&. This function activate the Automatic mode assigning what is the Filter slot to be selected in the Filter device\&.
.PP
The Application filter selection talks about Filter material,
.br
wheather the internal filter management talks about filter slot\&.
.PP
setFilterAutoMode( filter-material ) --> Auto Filter Slot = slot assigned to the filter-material
.PP
\fBParameters\fP
.RS 4
\fIcode\fP The Filter (material) requested
.RE
.PP

.SS "void PCB315::setFilterAutoMode (void)\fC [static]\fP"

.PP
This function acctivates the auto mode: the selected filter has been already set\&. This function activates the Filter Auto mode;
.br
The filter selection however shall be already selected\&.
.SS "void PCB315::setFilterManualMode (\fBfilterMaterialCodes\fP code)\fC [static]\fP"

.PP
This function activates the manaul mode assigning the filter to be selected\&. This function activate the Manual mode assigning what is the Filter slot to be selected in the Filter device\&.
.PP
The Application filter selection talks about Filter material,
.br
wheather the internal filter management talks about filter slot\&.
.PP
setFilterManaulMode( filter-material ) --> Manaul Filter Slot = slot assigned to the filter-material
.PP
\fBParameters\fP
.RS 4
\fIcode\fP The Filter (material) requested
.RE
.PP

.SS "void PCB315::setFilterManualMode (void)\fC [static]\fP"

.PP
This function activates the manaul mode: the filter shall be already set\&. This function activates the Filter Manual mode;
.br
The filter selection however shall be already selected\&.
.SS "void PCB315::setMirrorMode (bool light)\fC [static]\fP"

.PP
This function activates the Mirror Mode and the light (if requested) This function activates the Mirror mode:
.PP
in the mirror mode, the mirror is selected in the Filter Device allowing the usage of the colliamtion light\&.
.PP
When the Mirror is positioned, the light is switched on automatically\&.
.PP
Because the light remains active for a limited time, the application can reactivate the light calling ones more this function\&.
.PP
\fBParameters\fP
.RS 4
\fIlight\fP request the activation of the light
.RE
.PP

.SS "bool PCB315::waitForValidFilter (void)\fC [static]\fP"

.PP
This function waits that a valid filter is selected\&. This function waits for a maximum of 2\&.5 seconds that a valid filter is selected\&.
.PP
The filter shall be selected before to call this function\&.
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU_MASTER Software Description from the source code\&.
