.TH "CANOPEN::Register" 3 "Wed Oct 18 2023" "MCPU_MASTER Software Description" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CANOPEN::Register \- This is the class implementating the CanOPEN SDO object register\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CanOpenMotor\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum class \fBSDOCommandCodes\fP { \fBWRCMD\fP = 0x20, \fBWRANSW\fP = 0x60, \fBRDCMD\fP = 0x40, \fBRDANSW\fP = 0x40, \fBERRACK\fP = 0x80 }"
.br
.ti -1c
.RI "enum class \fBSDODataDimension\fP { \fBR0B\fP = 0, \fBR1B\fP = 0x0F, \fBR2B\fP = 0x0B, \fBR3B\fP = 0x07, \fBR4B\fP = 0x03 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRegister\fP ()"
.br
.RI "This is the constructor of a void register\&. "
.ti -1c
.RI "\fBRegister\fP (unsigned short idx, unsigned char sub, \fBSDODataDimension\fP dim, unsigned int dt)"
.br
.RI "Instance of a initialized register\&. "
.ti -1c
.RI "\fBRegister\fP (unsigned short idx, unsigned char sub, \fBSDODataDimension\fP dim)"
.br
.RI "Instance of a non initialized register "
.ti -1c
.RI "bool \fBgetReadBuffer\fP (unsigned char *buffer)"
.br
.RI "Encode a CAN buffer frame for a read command of the register "
.ti -1c
.RI "bool \fBgetWriteBuffer\fP (unsigned char *buffer)"
.br
.RI "Encode a CAN buffer frame for a write command of the register "
.ti -1c
.RI "unsigned char \fBgetCmd\fP (unsigned char *frame)"
.br
.RI "Gets the command content form a frame  "
.ti -1c
.RI "unsigned char \fBgetDataDim\fP (unsigned char *frame)"
.br
.RI "Gets the data dimension content from a frame  "
.ti -1c
.RI "unsigned short \fBgetIdx\fP (unsigned char *frame)"
.br
.RI "Gets the Index address from a can frame  "
.ti -1c
.RI "unsigned char \fBgetSub\fP (unsigned char *frame)"
.br
.RI "Gets the Sub Index address from a can frame  "
.ti -1c
.RI "unsigned int \fBgetVal\fP (unsigned char *frame)"
.br
.RI "Gets the Value from a can frame\&. "
.ti -1c
.RI "bool \fBvalidateSdo\fP (unsigned char *frame)"
.br
.RI "This function is used to validate an incoming can frame as a result of a read or write commands\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSDOCommandCodes\fP \fBcmd\fP"
.br
.RI "Command Code assigned to a register for a pending Read or Write command\&. "
.ti -1c
.RI "\fBSDODataDimension\fP \fBdata_dim\fP"
.br
.RI "Data dimension assigned for write commands or received by read commands\&. "
.ti -1c
.RI "unsigned short \fBindex\fP"
.br
.RI "\fBRegister\fP Index address\&. "
.ti -1c
.RI "unsigned char \fBsubindex\fP"
.br
.RI "Regiter SubIndex address\&. "
.ti -1c
.RI "unsigned int \fBdata\fP"
.br
.RI "4 Bytes Data content register: assigned ffor write commands, received by read commands "
.ti -1c
.RI "bool \fBvalid\fP"
.br
.RI "Result of a validation process (in the reception can frame evaluation) "
.in -1c
.SH "Detailed Description"
.PP 
This is the class implementating the CanOPEN SDO object register\&. 

The CanOPEN device declares a set of the so called Object registers, a collection of internal registers that determines the workflow of the motor\&.
.PP
An Object register is defined by:
.IP "\(bu" 2
Index: a 2 bytes (little endian encoding) main address;
.IP "\(bu" 2
Sub-index: a 1 byte sub address;
.IP "\(bu" 2
Data dimension: 1 Byte defining the dimension of the register value;
.IP "\(bu" 2
Data value: 1 to 4 byte register value in little endian format;
.PP
.PP
This Class implements the content of the Object \fBRegister\fP and also provides tools to encode/decode a SDO Can frame for reading and writing a register\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum class \fBCANOPEN::Register::SDOCommandCodes\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIWRCMD \fP\fP
SDO Write command for frame to the remote device\&. 
.TP
\fB\fIWRANSW \fP\fP
SDO Write command ack code from the remote device\&. 
.TP
\fB\fIRDCMD \fP\fP
SDO Read command for frame to the remote device\&. 
.TP
\fB\fIRDANSW \fP\fP
SDO Read command ack code from the remote device\&. 
.TP
\fB\fIERRACK \fP\fP
SDO Error ack code from the remote device\&. 
.SS "enum class \fBCANOPEN::Register::SDODataDimension\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIR0B \fP\fP
SDO null dimension (for nanoj upload procedure) 
.TP
\fB\fIR1B \fP\fP
SDO 1 Byte data dimension\&. 
.TP
\fB\fIR2B \fP\fP
SDO 2 Byte data dimension\&. 
.TP
\fB\fIR3B \fP\fP
SDO 3 Byte data dimension\&. 
.TP
\fB\fIR4B \fP\fP
SDO 4 Byte data dimension\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CANOPEN::Register::Register ()\fC [inline]\fP"

.PP
This is the constructor of a void register\&. The created register doesn't have any informatioon about the phisical target register\&.
.PP
All the internal parameters are cleared\&. The register is set as not valid\&.
.SS "CANOPEN::Register::Register (unsigned short idx, unsigned char sub, \fBSDODataDimension\fP dim, unsigned int dt)\fC [inline]\fP"

.PP
Instance of a initialized register\&. This constructor creates an object register pointingto a phisical register (with address, data data type) and initalizes its data value\&.
.PP
\fBParameters\fP
.RS 4
\fIindex\fP index of the register
.br
\fIsubidx\fP sub index of the register
.br
\fIdim\fP dimension of the data
.br
\fIdt\fP default value
.RE
.PP

.SS "CANOPEN::Register::Register (unsigned short idx, unsigned char sub, \fBSDODataDimension\fP dim)\fC [inline]\fP"

.PP
Instance of a non initialized register This constructor creates an object register pointing to a phisical register (with address, data data type) but without initializing its content\&.
.PP
\fBParameters\fP
.RS 4
\fIindex\fP index of the register
.br
\fIsubidx\fP sub index of the register
.br
\fIdim\fP dimension of the data
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "unsigned char CANOPEN::Register::getCmd (unsigned char * frame)\fC [inline]\fP"

.PP
Gets the command content form a frame  
.PP
\fBParameters\fP
.RS 4
\fIframe\fP can frame
.RE
.PP
\fBReturns\fP
.RS 4
command code
.RE
.PP

.SS "unsigned char CANOPEN::Register::getDataDim (unsigned char * frame)\fC [inline]\fP"

.PP
Gets the data dimension content from a frame  
.PP
\fBParameters\fP
.RS 4
\fIframe\fP can frame
.RE
.PP
\fBReturns\fP
.RS 4
data dimension code
.RE
.PP

.SS "unsigned short CANOPEN::Register::getIdx (unsigned char * frame)\fC [inline]\fP"

.PP
Gets the Index address from a can frame  
.PP
\fBParameters\fP
.RS 4
\fIframe\fP can frame
.RE
.PP
\fBReturns\fP
.RS 4
Index register
.RE
.PP

.SS "bool CANOPEN::Register::getReadBuffer (unsigned char * buffer)\fC [inline]\fP"

.PP
Encode a CAN buffer frame for a read command of the register This command is used to encode a can frame to be used to read an Object \fBRegister\fP from the motor device\&.
.PP
The register shall contains the index and Subindex\&. The application can use a constructor without value initialization and then using this function to retrive the can data buffer to be used in the communication with the remote motor device\&.
.PP
\fBParameters\fP
.RS 4
\fIbuffer\fP 
.RE
.PP
\fBReturns\fP
.RS 4
true if success
.RE
.PP

.SS "unsigned char CANOPEN::Register::getSub (unsigned char * frame)\fC [inline]\fP"

.PP
Gets the Sub Index address from a can frame  
.PP
\fBParameters\fP
.RS 4
\fIframe\fP can frame
.RE
.PP
\fBReturns\fP
.RS 4
Sub Index register
.RE
.PP

.SS "unsigned int CANOPEN::Register::getVal (unsigned char * frame)\fC [inline]\fP"

.PP
Gets the Value from a can frame\&. The value depends of the data dimension encoded into the frame\&.
.PP
\fBParameters\fP
.RS 4
\fIframe\fP can frame
.RE
.PP
\fBReturns\fP
.RS 4
Value
.RE
.PP

.SS "bool CANOPEN::Register::getWriteBuffer (unsigned char * buffer)\fC [inline]\fP"

.PP
Encode a CAN buffer frame for a write command of the register This command is used to encode a can frame to be used to write an Object \fBRegister\fP to the motor device\&.
.PP
The register shall contains the Index, Subindex, data format and data value\&.
.PP
The application can use a constructor with value initialization and then using this function to retrive the can data buffer to be used in the communication with the remote motor device\&.
.PP
\fBParameters\fP
.RS 4
\fIbuffer\fP 
.RE
.PP
\fBReturns\fP
.RS 4
true if success
.RE
.PP

.SS "bool CANOPEN::Register::validateSdo (unsigned char * frame)\fC [inline]\fP"

.PP
This function is used to validate an incoming can frame as a result of a read or write commands\&. Usually this function is used in the an Reception callback to accept and validate a SDO command acknowledge form the remmote device;
.PP
The validation process requires the following tests:
.IP "\(bu" 2
The incoming Index shall match the register Index;
.IP "\(bu" 2
The incoming Sub-Index shall match the register Sub-Index;
.IP "\(bu" 2
The incoming command answer shall match with the register expected command;
.PP
.PP
If the incoming frame matches with the \fBRegister\fP Address and command, the register value is updated with the incoming value:
.IP "\(bu" 2
In case of a Read command, the incoming value is the content of the remote register;
.IP "\(bu" 2
In case of Write command, the incoming value should match with the value written;
.PP
.PP
\fBParameters\fP
.RS 4
\fIframe\fP incoming can data frame
.RE
.PP
\fBReturns\fP
.RS 4
true if the data are valid
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBSDOCommandCodes\fP CANOPEN::Register::cmd"

.PP
Command Code assigned to a register for a pending Read or Write command\&. 
.SS "unsigned int CANOPEN::Register::data"

.PP
4 Bytes Data content register: assigned ffor write commands, received by read commands 
.SS "\fBSDODataDimension\fP CANOPEN::Register::data_dim"

.PP
Data dimension assigned for write commands or received by read commands\&. 
.SS "unsigned short CANOPEN::Register::index"

.PP
\fBRegister\fP Index address\&. 
.SS "unsigned char CANOPEN::Register::subindex"

.PP
Regiter SubIndex address\&. 
.SS "bool CANOPEN::Register::valid"

.PP
Result of a validation process (in the reception can frame evaluation) 

.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU_MASTER Software Description from the source code\&.
