.TH "PCB303_Module" 3 "Mon Sep 30 2024" "MCPU" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PCB303_Module \- PCB303 Module: format collimation
.PP
 \- This module implements the functions of the Collimator device  

.SH SYNOPSIS
.br
.PP
.SS "Modules"

.in +1c
.ti -1c
.RI "\fBProtocol implementation\fP"
.br
.RI "This section implements the internal module data and structures in order to implement the protocol detail specifications related to the \fBPCB303\fP board\&. "
.ti -1c
.RI "\fBInternal implementation section\fP"
.br
.ti -1c
.RI "\fBApplication Interface\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBPCB303\fP"
.br
.RI "This class implements the functions of the \fBPCB303\fP Module "
.in -1c
.SH "Detailed Description"
.PP 
This module implements the functions of the Collimator device 


.IP "\(bu" 2
2D Format collimation;
.IP "\(bu" 2
Tomo Dynamic Collimation;
.PP
.PP
The module implements the Device Communication protocol to communicate with the \fBPCB303\fP device through the CAN bus\&.
.PP
In order to implement the protocol, the module inherits the \fBCanDeviceProtocol\fP class as the base class\&.
.PP
The module overrides the configurationLoop() routine of the Base class in order to writes the initialization Parameters and Data Registers as needed\&.
.br
 The routine is automatically called by the Base class after system startup or always after a device reset event\&.
.PP
This module overrides the runningLoop() rotine of the base class in order to implement the device specific functions\&.
.PP
As soon as the module class is Instantiated, the constructor will call the Base class constructor\&.
.br
The Base class constructor, through the CAN Driver module, tries to connect the Board Device getting the Bootloader and Application revision codes\&.
.PP
When the Device connection is established and the Board Device firmware revision is acquired,
.br
the Base class calls the configurationLoop() routine (overridden in this module),
.br
in order to let the module to upload and store the Device Parameters and the deviice DATA registers\&.
.br
In detail, the moudule in the configurationLoop() routine:
.PP
.IP "\(bu" 2
Uploads the Standard Collimation format parameters;
.IP "\(bu" 2
Uploads the Tomo collimation format parameters;
.PP
.PP
When the configuration fase termines, the module runs the runningLoop() routine (overridden from the Base class),
.br
to handle the normal workflow\&. 
.PP
.nf
NOTE: as soon as the startup termines, the Module automatically sets the OPEN collimation mode\&.

.fi
.PP
 In the normal module workflow - runningLoop() - the module controls the Collimator device insuring that the current 
.br
Application requested collimation format is selected and operating in the collimator device\&.
.PP
In case of the actual collimation shouldn't corrispond with the requested collimation,
.br
the module automatically tries for a maximum of 5 times to set the correct collimation\&.
.br
In case the number of attempts should expire, the module will disable any further attempt and
.br
an error condition is activated (is up to the application to handle the fault condition)\&. 
.PP
.nf
NOTE: In case of error, the Application can call the resetFault() routine to restart the collimation attempts\&.

.fi
.PP
.SH "Application Interface"
.PP
The module provides the following Application interface:
.PP
.IP "\(bu" 2
setAutoCollimationMode() : This function sets the format collimation to AUTO mode;
.IP "\(bu" 2
setOpenCollimationMode(): This function sets the format collimation to OPEN mode;
.IP "\(bu" 2
setCalibrationCollimationMode(): This function sets the format collimation to CALIBRATION mode;
.IP "\(bu" 2
setCustomCollimationMode(): This function sets the format collimation to CUSTOM mode;
.IP "\(bu" 2
resetFaults(): This function allows the Module to attempt ones more to execute a collimation, in case of fault condition;
.IP "\(bu" 2
getError(): This function returns an error code in case of the collimator should be in error condition;
.PP
.SH "2D Collimation Format Selection specification"
.PP
The module allows the Application to select one of the following 2D collimation modes:
.PP
.IP "\(bu" 2
OPEN collimation mode;
.IP "\(bu" 2
AUTO collimation mode;
.IP "\(bu" 2
CUSTOM collimation mode;
.IP "\(bu" 2
CALIBRATION collimation mode;
.PP
.SS "OPEN Collimation Mode"
If the Application should select the OPEN collimation mode,
.br
the Module will set the Collimator blades to 0\&. This is a so called Open 
.br
position where the collimator doesn't act any collimation on the X-RAYS\&.
.br
 This collimation mode should be used for test or calibration purpose\&. 
.PP
.nf
NOTE: this collimation mode is automatically set by the Module after the system startup\&. 

.fi
.PP
 
.SS "AUTO Collimation Mode"
If the Application should select the AUTO collimation mode,
.br
the Module sets the current collimation format based on the current detected compressor Paddle\&.
.PP
The Paddle is assigned to a given collimation format into the PaddleCalibration file\&.
.PP
This collimation mode should be set by the Application in the Operating workflow\&.
.SS "CUSTOM Collimation Mode"
If the Application should select the CUSTOM collimation mode,
.br
the Module sets the current collimation format equal to the format directly set by the Application with the proper interface command - setCustomCalibraitonMode(customFormat) -\&.
.PP
The custom collimation format can be selected from the 20 predefined collimation formats\&.
.SS "CALIBRATION Collimation Mode"
If the Application should select the CALIBRATION collimation mode,
.br
the module will force the current blades position to get a non standard value imposed by the application\&.
.PP
The Application requests this Non Standard collimation using the proper
.br
 interface function passing the value of the target blades positons as parameter\&.
.SH "Collimator Calibration file"
.PP
The Application can calibrate a maximum of 20 possibles standard 2D collimation formats\&.
.br
All those formats shares the same Trap and Front blade positions because they should not change
.br
 along with the paddle geometry\&.
.PP
See the \fBCollimatorConfig\fP class for details\&.
.SH "Format collimation errors"
.PP
In case the collimator should fail in setting the requested collimation mode, the module automatically tries to repeat the collimation command for a max of five times\&.
.PP
If the command repetion should fail, the Module disables further collimation selection attempts and a persistent error condition will be notified in the system\&.
.PP
.IP "\(bu" 2
The Application can check an error condition presence calling the getError() function;
.IP "\(bu" 2
In case of Error, the Application may restart the collimation attempts calling the resetFault() function;
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU from the source code\&.
