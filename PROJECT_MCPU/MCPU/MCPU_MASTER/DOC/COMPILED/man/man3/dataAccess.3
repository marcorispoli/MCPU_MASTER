.TH "dataAccess" 3 "Wed May 29 2024" "MCPU_MASTER Software Description" \" -*- nroff -*-
.ad l
.nh
.SH NAME
dataAccess \- Protected Module's Data Access API
.PP
 \- This group provides API to access remote register in read write modes  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBCanDeviceProtocol::Register\fP"
.br
.RI "This is the data structure handling the protocol device register data\&. "
.ti -1c
.RI "class \fBCanDeviceProtocol::CanDeviceRegister\fP"
.br
.RI "This class provides a data structure for the can device frame communication protocol\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBRegister\fP ^ \fBCanDeviceProtocol::readCommandRegister\fP (void)"
.br
.RI "This function executes the read of the special device command register\&.  "
.ti -1c
.RI "\fBRegister\fP ^ \fBCanDeviceProtocol::readErrorRegister\fP (void)"
.br
.RI "This function executes the read of the special device error register\&.  "
.ti -1c
.RI "\fBRegister\fP ^ \fBCanDeviceProtocol::readStatusRegister\fP (unsigned char index)"
.br
.RI "This function executes the read of the STATUS register of given INDEX\&.  "
.ti -1c
.RI "\fBRegister\fP ^ \fBCanDeviceProtocol::readDataRegister\fP (unsigned char index)"
.br
.RI "This function executes the read of the DATA register of given INDEX\&.  "
.ti -1c
.RI "bool \fBCanDeviceProtocol::writeParamRegister\fP (unsigned char index, unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3)"
.br
.RI "This function executes the write of the PARAMETER(index)\&.  "
.ti -1c
.RI "bool \fBCanDeviceProtocol::writeParamRegister\fP (unsigned char idx, \fBRegister\fP^ reg)"
.br
.RI "This function executes the write of the PARAMETER(index)\&.  "
.ti -1c
.RI "bool \fBCanDeviceProtocol::writeDataRegister\fP (unsigned char index, unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3)"
.br
.RI "This function executes the write of the DATA(index)\&.  "
.ti -1c
.RI "bool \fBCanDeviceProtocol::writeDataRegister\fP (unsigned char idx, \fBRegister\fP^ reg)"
.br
.RI "This function executes the write of the DATA(index)\&.  "
.ti -1c
.RI "\fBCanDeviceProtocol::CanDeviceRegister\fP ^ \fBCanDeviceProtocol::getRxRegister\fP (void)"
.br
.RI "This function returns the last read register\&. "
.in -1c
.SH "Detailed Description"
.PP 
This group provides API to access remote register in read write modes 

Since the access to the remote device should be made only by the class handling the communication with that module, the API for the data access shall be limited to the Subclass module implementing the communication with the device\&.
.PP
This group provides API to access remote register in read write modes:
.IP "\(bu" 2
Read the STATUS registers;
.IP "\(bu" 2
Write the DATA registers
.IP "\(bu" 2
Write the parameter registers;
.IP "\(bu" 2
Read the Special registers\&. 
.PP

.SH "Function Documentation"
.PP 
.SS "\fBCanDeviceProtocol::CanDeviceRegister\fP ^ CanDeviceProtocol::getRxRegister (void)\fC [inline]\fP, \fC [protected]\fP"

.PP
This function returns the last read register\&. 
.PP
\fBReturns\fP
.RS 4
The last valid read register content
.RE
.PP

.SS "\fBCanDeviceProtocol::Register\fP CanDeviceProtocol::readCommandRegister (void)\fC [protected]\fP"

.PP
This function executes the read of the special device command register\&.  
.PP
\fBReturns\fP
.RS 4
The device command register content or nullptr in case of communication error\&.
.RE
.PP

.SS "\fBCanDeviceProtocol::Register\fP CanDeviceProtocol::readDataRegister (unsigned char index)\fC [protected]\fP"

.PP
This function executes the read of the DATA register of given INDEX\&.  
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the target Data register
.RE
.PP
\fBReturns\fP
.RS 4
The device STATUS Data(index) content or nullptr in case of communication error
.RE
.PP

.SS "\fBCanDeviceProtocol::Register\fP CanDeviceProtocol::readErrorRegister (void)\fC [protected]\fP"

.PP
This function executes the read of the special device error register\&.  
.PP
\fBReturns\fP
.RS 4
The device error register content or nullptr in case of communication error
.RE
.PP

.SS "\fBCanDeviceProtocol::Register\fP CanDeviceProtocol::readStatusRegister (unsigned char index)\fC [protected]\fP"

.PP
This function executes the read of the STATUS register of given INDEX\&.  
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the target Status register
.RE
.PP
\fBReturns\fP
.RS 4
The device STATUS Register(index) content or nullptr in case of communication error
.RE
.PP

.SS "bool CanDeviceProtocol::writeDataRegister (unsigned char idx, \fBRegister\fP^ reg)\fC [inline]\fP, \fC [protected]\fP"

.PP
This function executes the write of the DATA(index)\&.  
.PP
\fBParameters\fP
.RS 4
\fIidx\fP Index of the target Data register
.br
\fIreg\fP \fBRegister\fP structure to be stored
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "bool CanDeviceProtocol::writeDataRegister (unsigned char index, unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3)\fC [protected]\fP"

.PP
This function executes the write of the DATA(index)\&.  
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the target Data register
.br
\fId0\fP D0 to be written
.br
\fId1\fP D1 to be written
.br
\fId2\fP D2 to be written
.br
\fId3\fP D3 to be written
.RE
.PP
\fBReturns\fP
.RS 4
true in case of success
.RE
.PP

.SS "bool CanDeviceProtocol::writeParamRegister (unsigned char idx, \fBRegister\fP^ reg)\fC [inline]\fP, \fC [protected]\fP"

.PP
This function executes the write of the PARAMETER(index)\&.  The device will store in EEPROM the parameter if it should be changed\&.
.PP
\fBParameters\fP
.RS 4
\fIidx\fP Index of the target Parameter register
.br
\fIreg\fP \fBRegister\fP structure to be stored
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "bool CanDeviceProtocol::writeParamRegister (unsigned char index, unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3)\fC [protected]\fP"

.PP
This function executes the write of the PARAMETER(index)\&.  The device will store in EEPROM the parameter if it should be changed\&.
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the target Parameter register
.br
\fId0\fP D0 to be written
.br
\fId1\fP D1 to be written
.br
\fId2\fP D2 to be written
.br
\fId3\fP D3 to be written
.RE
.PP
\fBReturns\fP
.RS 4
true in case of success
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU_MASTER Software Description from the source code\&.
