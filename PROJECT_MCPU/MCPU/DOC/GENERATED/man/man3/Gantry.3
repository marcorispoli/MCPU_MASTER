.TH "Gantry" 3 "Mon Sep 30 2024" "MCPU" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Gantry
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum class \fBoperating_status_options\fP { \fBGANTRY_STARTUP\fP = 0, \fBGANTRY_IDLE\fP, \fBGANTRY_OPERATING\fP, \fBGANTRY_SERVICE\fP }"
.br
.ti -1c
.RI "enum class \fBmanual_rotation_options\fP { \fBGANTRY_MANUAL_ROTATION_DISABLED\fP = 0, \fBGANTRY_STANDARD_STATUS_MANUAL_ROTATION\fP, \fBGANTRY_BODY_MANUAL_ROTATION\fP, \fBGANTRY_SLIDE_MANUAL_ROTATION\fP, \fBGANTRY_TILT_MANUAL_ROTATION\fP, \fBGANTRY_ARM_MANUAL_ROTATION\fP, \fBGANTRY_VERTICAL_MANUAL_ROTATION\fP }"
.br
.ti -1c
.RI "enum class \fBsafety_rotation_conditions\fP { \fBGANTRY_SAFETY_OK\fP, \fBGANTRY_SAFETY_EMERGENCY_BUTTON\fP, \fBGANTRY_SAFETY_POWER_DOWN\fP, \fBGANTRY_SAFETY_COMPRESSION\fP, \fBGANTRY_SAFETY_CABINET\fP, \fBGANTRY_SAFETY_POWER_SUPPLY\fP }"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBinitialize\fP (void)"
.br
.ti -1c
.RI "static void \fBsetManualRotationMode\fP (\fBmanual_rotation_options\fP mode)"
.br
.ti -1c
.RI "static bool \fBgetObstacleRotationStatus\fP (int addr, \fBCANOPEN::CanOpenMotor::motor_rotation_activations\fP direction)"
.br
.ti -1c
.RI "static \fBsafety_rotation_conditions\fP \fBgetSafetyRotationStatus\fP (int addr)"
.br
.ti -1c
.RI "static \fBCANOPEN::CanOpenMotor::motor_rotation_activations\fP \fBgetManualActivationRequestState\fP (int device_id)"
.br
.ti -1c
.RI "static System::String ^ \fBgetPatientName\fP (void)"
.br
.ti -1c
.RI "static bool \fBsetOpenStudy\fP (System::String^ patient)"
.br
.ti -1c
.RI "static bool \fBsetCloseStudy\fP (void)"
.br
.ti -1c
.RI "static System::String ^ \fBgetOperatingStatusName\fP (void)"
.br
.ti -1c
.RI "static bool \fBisSERVICE\fP (void)"
.br
.ti -1c
.RI "static bool \fBisIDLE\fP (void)"
.br
.ti -1c
.RI "static bool \fBisOPERATING\fP (void)"
.br
.ti -1c
.RI "static bool \fBisSTARTUP\fP (void)"
.br
.ti -1c
.RI "static bool \fBsetIdle\fP (void)"
.br
.ti -1c
.RI "static void \fBsetStartup\fP (void)"
.br
.ti -1c
.RI "static bool \fBsetOperating\fP (void)"
.br
.ti -1c
.RI "static bool \fBsetService\fP (void)"
.br
.ti -1c
.RI "static \fBValuePopupForm\fP ^ \fBgetValuePopupWindow\fP ()"
.br
.ti -1c
.RI "static bool \fBisOperatingDemo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisOperatingSym\fP (void)"
.br
.ti -1c
.RI "static bool \fBisOperatingNormal\fP (void)"
.br
.ti -1c
.RI "static bool \fBisPcb301Demo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisPcb302Demo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisPcb303Demo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisPcb304Demo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisPcb315Demo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisPcb326Demo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisMotorTiltDemo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisMotorArmDemo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisMotorBodyDemo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisMotorVerticalDemo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisMotorSlideDemo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisGeneratorDemo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisCanDriverDemo\fP (void)"
.br
.ti -1c
.RI "static bool \fBisMotorsActive\fP (void)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBGantry\fP ^ \fBgantry_handle\fP = gcnew \fBGantry\fP()"
.br
.ti -1c
.RI "static int \fBmonitor_X0\fP"
.br
.RI "Pointer to the Monitor X0 position\&. "
.ti -1c
.RI "static int \fBmonitor_Y0\fP"
.br
.RI "Pointer to the Monitor Y0 position\&. "
.ti -1c
.RI "static System::String ^ \fBapplicationResourcePath\fP"
.br
.RI "This is the current application resource path\&. "
.ti -1c
.RI "static Object ^ \fBpIdleForm\fP"
.br
.RI "Pointer to the \fBIdleForm\fP\&. "
.ti -1c
.RI "static Object ^ \fBpOperatingForm\fP"
.br
.RI "Pointer to the \fBOperatingForm\fP\&. "
.ti -1c
.RI "static Object ^ \fBpServiceForm\fP"
.br
.RI "Pointer to the \fBServiceForm\fP\&. "
.ti -1c
.RI "static Object ^ \fBpDebugger\fP = nullptr"
.br
.RI "Pointer to the Debugger if activated\&. "
.ti -1c
.RI "static const cli::array< System::String^> ^ \fBoperating_status_tags\fP = gcnew cli::array<System::String^> { 'GANTRY_STARTUP', 'GANTRY_IDLE', 'GANTRY_OPEN_STUDY', 'GANTRY_SERVICE', 'UNDEF' }"
.br
.RI "This is the option-tags static array\&. "
.ti -1c
.RI "static \fBmanual_rotation_options\fP \fBmanual_rotation_mode\fP = \fBmanual_rotation_options::GANTRY_MANUAL_ROTATION_DISABLED\fP"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum class \fBGantry::manual_rotation_options\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIGANTRY_MANUAL_ROTATION_DISABLED \fP\fP
The Manual rotation is globally disabled 
.br
 
.TP
\fB\fIGANTRY_STANDARD_STATUS_MANUAL_ROTATION \fP\fP
Arm rotation and Vertical activation with buttons and pedals\&. 
.TP
\fB\fIGANTRY_BODY_MANUAL_ROTATION \fP\fP
Pedals and Buttons for Body rotation\&. 
.TP
\fB\fIGANTRY_SLIDE_MANUAL_ROTATION \fP\fP
Pedals and Buttons for Slide\&. 
.TP
\fB\fIGANTRY_TILT_MANUAL_ROTATION \fP\fP
Pedals and Buttons for Slide\&. 
.TP
\fB\fIGANTRY_ARM_MANUAL_ROTATION \fP\fP
Pedals and Buttons for Arm\&. 
.TP
\fB\fIGANTRY_VERTICAL_MANUAL_ROTATION \fP\fP
Pedals and Buttons for Vertical\&. 
.SS "enum class \fBGantry::operating_status_options\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIGANTRY_STARTUP \fP\fP
\fBGantry\fP is in the Startup operating mode\&. 
.TP
\fB\fIGANTRY_IDLE \fP\fP
\fBGantry\fP is in the Idle operating mode\&. 
.TP
\fB\fIGANTRY_OPERATING \fP\fP
\fBGantry\fP is in the Operating operating mode\&. 
.TP
\fB\fIGANTRY_SERVICE \fP\fP
\fBGantry\fP is in the Service operating mode 
.br
 
.SS "enum class \fBGantry::safety_rotation_conditions\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIGANTRY_SAFETY_OK \fP\fP
No safety issues are detected\&. 
.TP
\fB\fIGANTRY_SAFETY_EMERGENCY_BUTTON \fP\fP
The Emergency push button is detected\&. 
.TP
\fB\fIGANTRY_SAFETY_POWER_DOWN \fP\fP
The Power down is detected\&. 
.TP
\fB\fIGANTRY_SAFETY_COMPRESSION \fP\fP
The Compression is present\&. 
.TP
\fB\fIGANTRY_SAFETY_CABINET \fP\fP
The Cabinet is open\&. 
.TP
\fB\fIGANTRY_SAFETY_POWER_SUPPLY \fP\fP
The Cabinet is open\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU from the source code\&.
