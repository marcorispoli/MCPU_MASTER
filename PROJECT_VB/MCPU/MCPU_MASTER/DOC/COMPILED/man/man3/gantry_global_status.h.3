.TH "C:/Users/m.rispoli/Documents/Workspace/Git/mcpu_master_vs/PROJECT_VB/MCPU/MCPU_MASTER/gantry_global_status.h" 3 "Wed Oct 18 2023" "MCPU_MASTER Software Description" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/m.rispoli/Documents/Workspace/Git/mcpu_master_vs/PROJECT_VB/MCPU/MCPU_MASTER/gantry_global_status.h
.SH SYNOPSIS
.br
.PP
\fC#include <math\&.h>\fP
.br
\fC#include 'ConfigFile\&.h'\fP
.br
\fC#include 'Errors\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBGlobalObjects\fP"
.br
.ti -1c
.RI "class \fBGantryStatusRegisters::enumType< T >\fP"
.br
.ti -1c
.RI "class \fBGantryStatusRegisters::FilterOptions\fP"
.br
.RI "This class implements the Filter selection interface\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::CollimationModeOption\fP"
.br
.ti -1c
.RI "class \fBGantryStatusRegisters::CompressionModeOption\fP"
.br
.RI "This class handles the Compression behavior during the exposure\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::ExposureTypeOption\fP"
.br
.RI "This class handles the exposure type status\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::DetectorTypeOption\fP"
.br
.RI "This class handles the Detector model selection\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::ArmModeOption\fP"
.br
.RI "This class provides the Arm Mode options handling\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::PatientProtectionMode\fP"
.br
.RI "This class handles the Usage of the patient protection during the exposure\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::PaddleOption\fP"
.br
.RI "This register handles the Paddles identifiable by the compressor device "
.ti -1c
.RI "class \fBGantryStatusRegisters::XrayPushButtonRegister\fP"
.br
.RI "This class handles the Xray Push Button activation status and activities "
.ti -1c
.RI "class \fBGantryStatusRegisters::TomoConfigRegister\fP"
.br
.RI "This class implements the Tomo configuration selection options\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::OperatingStatusRegister\fP"
.br
.RI "This is the Gantry operating status register definition\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::ComponentRegister\fP"
.br
.RI "This register handle the Component that can be used during the exposure "
.ti -1c
.RI "class \fBGantryStatusRegisters::CollimatorComponentRegister\fP"
.br
.RI "This register handles the component applicable to the collimator "
.ti -1c
.RI "class \fBGantryStatusRegisters::CompressorRegister\fP"
.br
.RI "This is the register handling the compression force and thickness\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::ExposureModeRegister\fP"
.br
.RI "This class handles the exposure type status\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::TrxStatusRegister\fP"
.br
.RI "This class handles the Trx motorization "
.ti -1c
.RI "class \fBGantryStatusRegisters::exposurePulse\fP"
.br
.RI "Internal class uses to group the exposure data pulses "
.ti -1c
.RI "class \fBGantryStatusRegisters::ExposureCompletedOptions\fP"
.br
.RI "This class implements the XRAY completed status register\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::ExposureDataRegister\fP"
.br
.RI "This register handle the Exposure pulse data info\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::TubeDataRegister\fP"
.br
.RI "This class handles the Xray Tybe data and setting\&. "
.ti -1c
.RI "class \fBGantryStatusRegisters::LanguageRegister\fP"
.br
.RI "This class handles the Interface language "
.ti -1c
.RI "class \fBGantryStatusRegisters::PowerStatusRegister\fP"
.br
.ti -1c
.RI "class \fBGantryStatusRegisters::SafetyStatusRegister\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBGantryStatusRegisters\fP"
.br
.RI "This is the class implementing the AWS Interface Module "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBpIDLEFORM\fP   ((IdleForm^) \fBGlobalObjects::pIdleForm\fP)"
.br
.ti -1c
.RI "#define \fBpOPERFORM\fP   ((OperatingForm^) \fBGlobalObjects::pOperatingForm\fP)"
.br
.ti -1c
.RI "#define \fBpAWS\fP   ((awsProtocol^) \fBGlobalObjects::pAws\fP)"
.br
.ti -1c
.RI "#define \fBpCAN\fP   ((CanDriver^) \fBGlobalObjects::pCan\fP)"
.br
.ti -1c
.RI "#define \fBpFW301\fP   ((PCB301^) \fBGlobalObjects::pFw301\fP)"
.br
.ti -1c
.RI "#define \fBpFW302\fP   ((PCB302^) \fBGlobalObjects::pFw302\fP)"
.br
.ti -1c
.RI "#define \fBpFW303\fP   ((PCB303^) \fBGlobalObjects::pFw303\fP)"
.br
.ti -1c
.RI "#define \fBpFW304\fP   ((PCB304^) \fBGlobalObjects::pFw304\fP)"
.br
.ti -1c
.RI "#define \fBpFW315\fP   ((PCB315^) \fBGlobalObjects::pFw315\fP)"
.br
.ti -1c
.RI "#define \fBpMBODY\fP   ((CanOpenMotor^) \fBGlobalObjects::pMotBody\fP)"
.br
.ti -1c
.RI "#define \fBpMTILT\fP   ((\fBTiltMotor\fP^) \fBGlobalObjects::pMotTilt\fP)"
.br
.ti -1c
.RI "#define \fBpMARM\fP   ((\fBArmMotor\fP^) \fBGlobalObjects::pMotArm\fP)"
.br
.ti -1c
.RI "#define \fBpMSHIFT\fP   ((CanOpenMotor^) \fBGlobalObjects::pMotShift\fP)"
.br
.ti -1c
.RI "#define \fBpMVERT\fP   ((\fBVerticalMotor\fP^) \fBGlobalObjects::pMotVert\fP)"
.br
.ti -1c
.RI "#define \fBpGENERATOR\fP   ((Generator^) \fBGlobalObjects::pGenerator\fP)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "delegate void \fBGantryStatusRegisters::delegate_void_callback\fP (void)"
.br
.RI "This is the delegate of the function with a void as parameter();\&. "
.ti -1c
.RI "delegate void \fBGantryStatusRegisters::delegate_string_callback\fP (String^ str)"
.br
.RI "This is the delegate of the function with a string as parameter();\&. "
.ti -1c
.RI "delegate void \fBGantryStatusRegisters::delegate_int_callback\fP (int i)"
.br
.RI "This is the delegate of the function with an integer as parameter();\&. "
.ti -1c
.RI "delegate void \fBGantryStatusRegisters::delegate_activation_completed\fP (unsigned short id, int error)"
.br
.RI "This is the delegate of the activation_completed_event();\&. "
.ti -1c
.RI "void \fBGantryStatusRegisters::dataLock\fP (void)"
.br
.ti -1c
.RI "void \fBGantryStatusRegisters::dataUnlock\fP (void)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define pAWS   ((awsProtocol^) \fBGlobalObjects::pAws\fP)"

.SS "#define pCAN   ((CanDriver^) \fBGlobalObjects::pCan\fP)"

.SS "#define pFW301   ((PCB301^) \fBGlobalObjects::pFw301\fP)"

.SS "#define pFW302   ((PCB302^) \fBGlobalObjects::pFw302\fP)"

.SS "#define pFW303   ((PCB303^) \fBGlobalObjects::pFw303\fP)"

.SS "#define pFW304   ((PCB304^) \fBGlobalObjects::pFw304\fP)"

.SS "#define pFW315   ((PCB315^) \fBGlobalObjects::pFw315\fP)"

.SS "#define pGENERATOR   ((Generator^) \fBGlobalObjects::pGenerator\fP)"

.SS "#define pIDLEFORM   ((IdleForm^) \fBGlobalObjects::pIdleForm\fP)"

.SS "#define pMARM   ((\fBArmMotor\fP^) \fBGlobalObjects::pMotArm\fP)"

.SS "#define pMBODY   ((CanOpenMotor^) \fBGlobalObjects::pMotBody\fP)"

.SS "#define pMSHIFT   ((CanOpenMotor^) \fBGlobalObjects::pMotShift\fP)"

.SS "#define pMTILT   ((\fBTiltMotor\fP^) \fBGlobalObjects::pMotTilt\fP)"

.SS "#define pMVERT   ((\fBVerticalMotor\fP^) \fBGlobalObjects::pMotVert\fP)"

.SS "#define pOPERFORM   ((OperatingForm^) \fBGlobalObjects::pOperatingForm\fP)"

.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU_MASTER Software Description from the source code\&.
