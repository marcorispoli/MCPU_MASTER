.TH "PCB301" 3 "MCPU" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PCB301
.SH SYNOPSIS
.br
.PP
.PP
\fR#include <PCB301\&.h>\fP
.PP
Inherits \fBCanDeviceProtocol\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBProtocolStructure\fP"
.br
.RI "This class implement the protocol data structure as described in the protocol specification\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPCB301\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBCanDeviceProtocol\fP
.in +1c
.ti -1c
.RI "\fBCanDeviceProtocol\fP (unsigned char devid, LPCWSTR devname)"
.br
.ti -1c
.RI "void \fBrunMode\fP (void)"
.br
.RI "This function activate the Module in Real mode\&. "
.ti -1c
.RI "void \fBsimulMode\fP (void)"
.br
.RI "This function activate the Module in Simulation mode\&. "
.ti -1c
.RI "bool \fBisSimulatorMode\fP (void)"
.br
.RI "This function tests if the module is running in simulation mode\&. "
.ti -1c
.RI "bool \fBisCommunicationError\fP (void)"
.br
.RI "This function tests if the module is in communication error condition\&. "
.ti -1c
.RI "\fBstatus_options\fP \fBgetModuleStatus\fP (void)"
.br
.RI "This function returns the Module operating status\&. "
.ti -1c
.RI "\fBbootloader_options\fP \fBgetBootStatus\fP (void)"
.br
.RI "This function returns the current status of the bootloader activities on the remote device\&. "
.ti -1c
.RI "System::String ^ \fBgetBootRevision\fP (void)"
.br
.RI "This function returns a string with the current detected Bootloader revision code\&. "
.ti -1c
.RI "System::String ^ \fBgetAppRevision\fP (void)"
.br
.RI "This function returns a string with the current detected remote firmware revision code\&. "
.ti -1c
.RI "bool \fBcommandNoWaitCompletion\fP (unsigned char code, unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3, int tmo)"
.br
.RI "This is a non blocking thread safe function sending a command to the remote device\&. "
.ti -1c
.RI "bool \fBcommandNoWaitCompletion\fP (\fBCanDeviceCommand\fP^ command, int tmo)"
.br
.ti -1c
.RI "\fBCanDeviceCommandResult\fP ^ \fBcommandWaitCompletion\fP (unsigned char code, unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3, int tmo, Object^ src)"
.br
.RI "This is a blocking thread safe function sending a command to the remote device\&. "
.ti -1c
.RI "\fBCanDeviceCommandResult\fP ^ \fBcommandWaitCompletion\fP (\fBCanDeviceCommand\fP^ command, int tmo, Object^ src)"
.br
.ti -1c
.RI "bool \fBisCommandCompleted\fP (void)"
.br
.RI "This function returns the current status of the pending command\&. "
.ti -1c
.RI "bool \fBisCommandError\fP (void)"
.br
.RI "This function returns true if the command is terminated with an error condition\&. "
.ti -1c
.RI "unsigned char \fBgetCommandResult0\fP (void)"
.br
.RI "In case of command completed without errors, this function returns the command returned data-0\&. "
.ti -1c
.RI "unsigned char \fBgetCommandResult1\fP (void)"
.br
.RI "In case of command completed without errors, this function returns the command returned data-1\&. "
.ti -1c
.RI "\fBCommandRegisterErrors\fP \fBgetCommandError\fP (void)"
.br
.RI "This function returns the last error condition of an executed command\&. "
.ti -1c
.RI "System::String ^ \fBgetCanCommunicationMonitorString\fP (void)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBgetPowerdown\fP (void)"
.br
.RI "This function returns the PowerDown condition status\&. "
.ti -1c
.RI "static bool \fBgetMotorPowerSupply\fP (void)"
.br
.RI "This function returns the current status of the 48DVC power supply activation status\&. "
.ti -1c
.RI "static void \fBsetMotorPowerSupply\fP (bool stat)"
.br
.RI "This method requests the board to disable the 48DVC power supply\&. "
.ti -1c
.RI "static bool \fBgetMotorSwitch\fP (void)"
.br
.RI "This method requests the current status of the safety external solid state relay\&. "
.ti -1c
.RI "static void \fBsetMotorSwitch\fP (bool stat)"
.br
.RI "This method requests the board to disable the 48VDC safety solid state relay\&. "
.ti -1c
.RI "static bool \fBgetBatteryEna\fP (void)"
.br
.RI "This method gets the current status of the Battery Enable External button\&. "
.ti -1c
.RI "static bool \fBgetBatteryAlarm\fP (void)"
.br
.RI "This method provides the info about a possible battery malfunction\&. "
.ti -1c
.RI "static bool \fBgetBatt1Alarm\fP (void)"
.br
.RI "This method provides the info about a possible battery 1 malfunction\&. "
.ti -1c
.RI "static bool \fBgetBatt2Alarm\fP (void)"
.br
.RI "This method provides the info about a possible battery 2 malfunction\&. "
.ti -1c
.RI "static unsigned char \fBgetVoltageBatt1\fP (void)"
.br
.RI "This method provides the info about the battery 1 voltage level in 0\&.1V units \&. "
.ti -1c
.RI "static unsigned char \fBgetVoltageBatt2\fP (void)"
.br
.RI "This method provides the info about the battery 2 voltage level in 0\&.1V units \&. "
.ti -1c
.RI "static bool \fBgetSoftPowerOffRequest\fP (void)"
.br
.RI "This method provides the status of the current soft power off request coming from the pcb301 board\&. "
.ti -1c
.RI "static void \fBsetPowerOff\fP (bool stat)"
.br
.RI "This method provides the Application to initiate a soft power off sequence\&. "
.ti -1c
.RI "static bool \fBgetPowerLockStatus\fP (void)"
.br
.RI "This method provides the current status of the Programming Power Lock\&. "
.ti -1c
.RI "static void \fBsetPowerLock\fP (bool stat)"
.br
.RI "This method provides the Application to activate the Programming Power Lock circuit\&. "
.ti -1c
.RI "static bool \fBgetEmergency\fP (void)"
.br
.RI "This function returns the Emergency Input circuit line activation status\&. "
.ti -1c
.RI "static bool \fBgetCabinetSafety\fP (void)"
.br
.RI "This function returns the Cabinet Safety Input circuit line activation status\&. "
.ti -1c
.RI "static bool \fBgetCompressionStatus\fP (void)"
.br
.RI "This function returns the Compression Pending Status Input circuit line activation status\&. "
.ti -1c
.RI "static bool \fBisClosedDoor\fP (void)"
.br
.RI "This function returns the Door Study Status Input circuit line activation status\&. "
.ti -1c
.RI "static void \fBSetCompressorEna\fP (bool stat)"
.br
.RI "This method sets the Compressor Enable Output line on the \fBPCB301\fP board\&. "
.ti -1c
.RI "static void \fBSetCompressorCalib\fP (bool stat)"
.br
.RI "This method sets the Compressor Calibration Output line on the \fBPCB301\fP board\&. "
.ti -1c
.RI "static bool \fBgetBurningJumper\fP (void)"
.br
.RI "This function returns the status of the Burning Jumper detected presence\&. "
.ti -1c
.RI "static bool \fBget_pedal_up_stat\fP (void)"
.br
.RI "This function returns the Pedal Board Vertical-Up Hardware Input Line status\&. "
.ti -1c
.RI "static bool \fBget_pedal_down_stat\fP (void)"
.br
.RI "This function returns the Pedal Board Vertical-Down Hardware Input Line status\&. "
.ti -1c
.RI "static bool \fBget_cmp_up_stat\fP (void)"
.br
.RI "This function returns the Pedal Board Compression-Up Hardware Input Line status\&. "
.ti -1c
.RI "static bool \fBget_cmp_down_stat\fP (void)"
.br
.RI "This function returns the Pedal Board Compression-Down Hardware Input Line status\&. "
.ti -1c
.RI "static bool \fBget_button_cw_stat\fP (void)"
.br
.RI "This function returns the Manual Keypad CW Hardware Input Line status\&. "
.ti -1c
.RI "static bool \fBget_button_ccw_stat\fP (void)"
.br
.RI "This function returns the Manual Keypad CCW Hardware Input Line status\&. "
.ti -1c
.RI "static bool \fBget_button_up_stat\fP (void)"
.br
.RI "This function returns the Manual Keypad Up Hardware Input Line status\&. "
.ti -1c
.RI "static bool \fBget_button_down_stat\fP (void)"
.br
.RI "This function returns the Manual Keypad Down Hardware Input Line status\&. "
.ti -1c
.RI "static bool \fBget_button_body_cw\fP (void)"
.br
.RI "This function returns the Manual Body-CW Hardware Input Line status\&. "
.ti -1c
.RI "static bool \fBget_button_body_ccw\fP (void)"
.br
.RI "This function returns the Manual Body-CCW Hardware Input Line status\&. "
.ti -1c
.RI "static bool \fBget_button_slide_up_stat\fP (void)"
.br
.RI "This function returns the Manual Slide-Up Hardware Input Line status\&. "
.ti -1c
.RI "static bool \fBget_button_slide_down_stat\fP (void)"
.br
.RI "This function returns the Manual Slide-Down Hardware Input Line status\&. "
.ti -1c
.RI "static void \fBset_keypad_led\fP (bool stat)"
.br
.RI "This function controls the status of the Keypad led\&. "
.ti -1c
.RI "static bool \fBgetXrayPushButtonStat\fP (void)"
.br
.RI "This method returns the current status of the X-RAY push button activation status\&. "
.ti -1c
.RI "static void \fBsetXrayEna\fP (bool stat)"
.br
.RI "This method requests to activate the x-ray enable hardware signal on the generator external interface\&. "
.ti -1c
.RI "static void \fBsetBuzzerManualMode\fP (bool stat)"
.br
.RI "This method sets the working mode of the Buzzer in Manual Mode or Automatic Mode\&. "
.ti -1c
.RI "static void \fBactivationManualBuzzer\fP (bool stat)"
.br
.RI "This method, when the buzzer is set in manual mode, sets the current status of the Buzzer device\&. "
.ti -1c
.RI "static \fBCanDeviceCommandResult\fP ^ \fBactivateManualBuzzerTomoMode\fP (int samples, int fps, int tmo, Object^ \fBdevice\fP)"
.br
.RI "This method, when the buzzer is set in manual mode, activates the buzzer in Tomo mode, providing a given number of consecutive pulses at a given rate\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBPCB301\fP ^ \fBdevice\fP = gcnew \fBPCB301\fP()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBrunningLoop\fP (void) override"
.br
.RI "This is the Running Loop overriden procedure\&. "
.ti -1c
.RI "void \fBdemoLoop\fP (void) override"
.br
.RI "This is the Demo Loop overriden procedure\&. "
.in -1c

Protected Member Functions inherited from \fBCanDeviceProtocol\fP
.in +1c
.ti -1c
.RI "\fBRegister\fP ^ \fBreadCommandRegister\fP (void)"
.br
.RI "This function executes the read of the special device command register\&. "
.ti -1c
.RI "\fBRegister\fP ^ \fBreadErrorRegister\fP (void)"
.br
.RI "This function executes the read of the special device error register\&. "
.ti -1c
.RI "\fBRegister\fP ^ \fBreadStatusRegister\fP (unsigned char index)"
.br
.RI "This function executes the read of the STATUS register of given INDEX\&. "
.ti -1c
.RI "\fBRegister\fP ^ \fBreadDataRegister\fP (unsigned char index)"
.br
.RI "This function executes the read of the DATA register of given INDEX\&. "
.ti -1c
.RI "bool \fBwriteParamRegister\fP (unsigned char index, unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3)"
.br
.RI "This function executes the write of the PARAMETER(index)\&. "
.ti -1c
.RI "bool \fBwriteParamRegister\fP (unsigned char idx, \fBRegister\fP^ reg)"
.br
.RI "This function executes the write of the PARAMETER(index)\&. "
.ti -1c
.RI "bool \fBwriteDataRegister\fP (unsigned char index, unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3)"
.br
.RI "This function executes the write of the DATA(index)\&. "
.ti -1c
.RI "bool \fBwriteDataRegister\fP (unsigned char idx, \fBRegister\fP^ reg)"
.br
.RI "This function executes the write of the DATA(index)\&. "
.ti -1c
.RI "\fBCanDeviceProtocol::CanDeviceRegister\fP ^ \fBgetRxRegister\fP (void)"
.br
.RI "This function returns the last read register\&. "
.ti -1c
.RI "virtual void \fBresetLoop\fP (void)"
.br
.RI "This routine shall be overridden by the subclass module in order to implement the specific operations in case of the remote device reset detection\&. "
.ti -1c
.RI "virtual bool \fBconfigurationLoop\fP (void)"
.br
.RI "This routine shall be overridden by the subclass module in order to implement the specific operations during the device configuration fase\&. "
.ti -1c
.RI "virtual bool \fBsimulCommandNoWaitCompletion\fP (unsigned char code, unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3, int tmo)"
.br
.RI "This function is called in case of simulation, when the \fBcommandNoWaitCompletion()\fP should be used by the application See the \fBcommandNoWaitCompletion()\fP for details\&. "
.ti -1c
.RI "virtual \fBCanDeviceCommandResult\fP ^ \fBsimulCommandWaitCompletion\fP (unsigned char code, unsigned char d0, unsigned char d1, unsigned char d2, unsigned char d3, int tmo, Object^ src)"
.br
.RI "This function is called in case of simulation, when the \fBcommandWaitCompletion()\fP should be used by the application See the \fBcommandWaitCompletion()\fP for details\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBevaluateEvents\fP (void)"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static \fBProtocolStructure\fP \fBprotocol\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Public Types inherited from \fBCanDeviceProtocol\fP
.in +1c
.ti -1c
.RI "enum class \fBCommandRegisterErrors\fP { \fBCommandRegisterErrors::COMMAND_NO_ERROR\fP = 0, \fBCommandRegisterErrors::COMMAND_ERROR_BUSY\fP, \fBCommandRegisterErrors::COMMAND_ERROR_INVALID_PARAM\fP, \fBCommandRegisterErrors::COMMAND_ERROR_MOMENTARY_DISABLED\fP, \fBCommandRegisterErrors::COMMAND_INVALID_DEVICE\fP =253, \fBCommandRegisterErrors::COMMAND_COMMUNICATION_ERROR\fP =254, \fBCommandRegisterErrors::COMMAND_DEVICE_TMO\fP = 255 }"
.br
.RI "This is the enumeration of the possible command executed errors\&. "
.ti -1c
.RI "enum class \fBstatus_options\fP { \fBstatus_options::WAITING_CAN_DRIVER_CONNECTION\fP = 0, \fBstatus_options::WAITING_REVISION\fP, \fBstatus_options::DEVICE_CONFIGURATION\fP, \fBstatus_options::DEVICE_RUNNING\fP, \fBstatus_options::DEVICE_SIMULATOR\fP, \fBstatus_options::LEN\fP, \fBstatus_options::UNDEF\fP = LEN }"
.br
.RI "This is the enumeration of the Module's internal operating status\&.
.br
See the \fBgetModuleStatus()\fP method\&. "
.ti -1c
.RI "enum class \fBbootloader_options\fP { \fBbootloader_options::BOOTLOADER_NOT_PRESENT\fP = 0, \fBbootloader_options::BOOTLOADER_RUNNING\fP = 1, \fBbootloader_options::BOOTLOADER_PRESENT\fP = 2, \fBbootloader_options::BOOTLOADER_UNCKNOWN_STAT\fP }"
.br
.RI "This is the enumeration calss defining the current status of the remote bootloader activity\&. "
.in -1c

Protected Attributes inherited from \fBCanDeviceProtocol\fP
.in +1c
.ti -1c
.RI "\fBCanDeviceCommunicationMonitor\fP \fBcan_communication_monitor\fP"
.br
.RI "This is the debug class\&. "
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "PCB301::PCB301 ()\fR [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "void PCB301::demoLoop (void )\fR [override]\fP, \fR [protected]\fP, \fR [virtual]\fP"

.PP
This is the Demo Loop overriden procedure\&. This callback is called whenever the Symulator device should not be connected\&.
.PP
Reimplemented from \fBCanDeviceProtocol\fP\&.
.SS "void PCB301::evaluateEvents (void )\fR [private]\fP"

.SS "void PCB301::runningLoop (void )\fR [override]\fP, \fR [protected]\fP, \fR [virtual]\fP"

.PP
This is the Running Loop overriden procedure\&. 
.PP
Reimplemented from \fBCanDeviceProtocol\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBPCB301\fP ^ PCB301::device = gcnew \fBPCB301\fP()\fR [static]\fP"

.SS "\fBProtocolStructure\fP PCB301::protocol\fR [static]\fP, \fR [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU from the source code\&.
