.TH "DebuggerCLI" 3 "Mon Sep 30 2024" "MCPU" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DebuggerCLI
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "delegate void \fBrxData_slot\fP (cli::array< System::Byte >^ receiveBuffer, int rc)"
.br
.RI "This is the delegate of the reception handler\&. "
.ti -1c
.RI "delegate void \fBconnection_slot\fP (bool status)"
.br
.RI "This is the delegate of the connection handler\&. "
.ti -1c
.RI "\fBDebuggerCLI\fP (System::String^ ip, int port)"
.br
.RI "This is the class constructor\&. "
.ti -1c
.RI "void \fBsend\fP (cli::array< System::Byte >^ buffer)"
.br
.RI "This is function to send data in the BUS\&. "
.ti -1c
.RI "bool \fBisConnected\fP (void)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBthreadWork\fP (void)"
.br
.RI "This is the worker thread for the connection management\&. "
.in -1c
.SS "Events"

.in +1c
.ti -1c
.RI "\fBrxData_slot\fP^ \fBrxData_event\fP"
.br
.RI "Reception event\&. "
.ti -1c
.RI "\fBconnection_slot\fP^ \fBconnection_event\fP"
.br
.RI "Connection event\&. "
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "void DebuggerCLI::send (cli::array< System::Byte >^ buffer)"

.PP
This is function to send data in the BUS\&. This function sends a buffer on the bus\&.
.PP
\fBParameters\fP
.RS 4
\fIbuffer\fP This is the data buffer to be sent
.RE
.PP

.SS "void DebuggerCLI::threadWork (void)\fC [protected]\fP"

.PP
This is the worker thread for the connection management\&. This is the worker thread for the connection management\&.
.PP
There are a two nexted loops:
.IP "\(bu" 2
The first is for the listening and connection management;
.br

.IP "\(bu" 2
The second is for the data reception\&.
.PP
.PP
When a conmnection is closed, the first loop automatically enters in listening in order to wait for a further connection\&. Only one connection at a time is allowed!!
.PP
Whenever a connection status changes, the worjer thread update the Applicaition rising an event for the connection notify\&.
.PP
When a buffer is received, a semaphore is used to lock the thread until the previous received buffer has been dispatched\&. When the semaphore is ready, the received buffer is copied into the dispatch buffer in order to be safely sent to the destination\&.
.PP
The buffer is then dispatched in two steps:
.IP "\(bu" 2
1: a message with the data buffer from the worker thread is Posted to the main thread's message queue, where this class resides;
.IP "\(bu" 2
2: the message is self-received by the class that can safely rise an event handler;
.IP "\(bu" 2
3: the event handler with the received buffer can now be safely (thread safe) consumed by any class or Form residing into the Applicaiton Main Thread\&.
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU from the source code\&.
