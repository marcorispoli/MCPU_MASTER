.TH "PCB301" 3 "Mon May 13 2024" "MCPU_MASTER Software Description" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PCB301
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <PCB301\&.h>\fP
.PP
Inherits \fBCanDeviceProtocol\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum class \fBdoor_options\fP { \fBCLOSED_DOOR\fP = 0, \fBOPEN_DOOR\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPCB301\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBgetPowerdown\fP (void)"
.br
.RI "This function returns the PowerDown condition status  "
.ti -1c
.RI "static bool \fBgetMotorPowerSupply\fP (void)"
.br
.RI "This function returns the current status of the 48DVC power supply activation status\&.  "
.ti -1c
.RI "static void \fBsetMotorPowerSupply\fP (bool stat)"
.br
.RI "This method requests the board to disable the 48DVC power supply\&.  "
.ti -1c
.RI "static bool \fBgetMotorSwitch\fP (void)"
.br
.RI "This method requests the current status of the safety external solid state relay  "
.ti -1c
.RI "static void \fBsetMotorSwitch\fP (bool stat)"
.br
.RI "This method requests the board to disable the 48VDC safety solid state relay\&.  "
.ti -1c
.RI "static bool \fBgetBatteryEna\fP (void)"
.br
.RI "This method gets the current status of the Battery Enable External button\&.  "
.ti -1c
.RI "static bool \fBgetBatteryAlarm\fP (void)"
.br
.RI "This method provides the info about a possible battery malfunction\&.  "
.ti -1c
.RI "static bool \fBgetBatt1Alarm\fP (void)"
.br
.RI "This method provides the info about a possible battery 1 malfunction\&.  "
.ti -1c
.RI "static bool \fBgetBatt2Alarm\fP (void)"
.br
.RI "This method provides the info about a possible battery 2 malfunction\&.  "
.ti -1c
.RI "static unsigned char \fBgetVoltageBatt1\fP (void)"
.br
.RI "This method provides the info about the battery 1 voltage level in 0\&.1V units \&.  "
.ti -1c
.RI "static unsigned char \fBgetVoltageBatt2\fP (void)"
.br
.RI "This method provides the info about the battery 2 voltage level in 0\&.1V units \&.  "
.ti -1c
.RI "static bool \fBgetSoftPowerOffRequest\fP (void)"
.br
.RI "This method provides the status of the current soft power off request coming from the pcb301 board  "
.ti -1c
.RI "static void \fBsetPowerOff\fP (bool stat)"
.br
.RI "This method provides the Application to initiate a soft power off sequence\&.  "
.ti -1c
.RI "static bool \fBgetPowerLockStatus\fP (void)"
.br
.RI "This method provides the current status of the Programming Power Lock  "
.ti -1c
.RI "static void \fBsetPowerLock\fP (bool stat)"
.br
.RI "This method provides the Application to activate the Programming Power Lock circuit\&.  "
.ti -1c
.RI "static bool \fBgetEmergency\fP (void)"
.br
.RI "This function returns the Emergency Input circuit line activation status\&.  "
.ti -1c
.RI "static bool \fBgetCabinetSafety\fP (void)"
.br
.RI "This function returns the Cabinet Safety Input circuit line activation status\&.  "
.ti -1c
.RI "static bool \fBgetCompressionStatus\fP (void)"
.br
.RI "This function returns the Compression Pending Status Input circuit line activation status\&.  "
.ti -1c
.RI "static \fBdoor_options\fP \fBgetDoorStatus\fP (void)"
.br
.RI "This function returns the Door Study Status Input circuit line activation status\&.  "
.ti -1c
.RI "static void \fBSetCompressorEna\fP (bool stat)"
.br
.RI "This method sets the Compressor Enable Output line on the \fBPCB301\fP board\&.  "
.ti -1c
.RI "static void \fBSetCompressorCalib\fP (bool stat)"
.br
.RI "This method sets the Compressor Calibration Output line on the \fBPCB301\fP board\&.  "
.ti -1c
.RI "static bool \fBgetBurningJumper\fP (void)"
.br
.RI "This function returns the status of the Burning Jumper detected presence  "
.ti -1c
.RI "static bool \fBget_pedal_up_stat\fP (void)"
.br
.RI "This function returns the Pedal Board Vertical-Up Hardware Input Line status\&.  "
.ti -1c
.RI "static bool \fBget_pedal_down_stat\fP (void)"
.br
.RI "This function returns the Pedal Board Vertical-Down Hardware Input Line status\&.  "
.ti -1c
.RI "static bool \fBget_cmp_up_stat\fP (void)"
.br
.RI "This function returns the Pedal Board Compression-Up Hardware Input Line status\&.  "
.ti -1c
.RI "static bool \fBget_cmp_down_stat\fP (void)"
.br
.RI "This function returns the Pedal Board Compression-Down Hardware Input Line status\&.  "
.ti -1c
.RI "static bool \fBget_button_arm_cw_stat\fP (void)"
.br
.RI "This function returns the Manual Keypad Arm-CW Hardware Input Line status\&.  "
.ti -1c
.RI "static bool \fBget_button_arm_ccw_stat\fP (void)"
.br
.RI "This function returns the Manual Keypad Arm-CCW Hardware Input Line status\&.  "
.ti -1c
.RI "static bool \fBget_button_up_stat\fP (void)"
.br
.RI "This function returns the Manual Keypad Vertical-Up Hardware Input Line status\&.  "
.ti -1c
.RI "static bool \fBget_button_down_stat\fP (void)"
.br
.RI "This function returns the Manual Keypad Vertical-Down Hardware Input Line status\&.  "
.ti -1c
.RI "static bool \fBget_button_body_cw\fP (void)"
.br
.RI "This function returns the Manual Body-CW Hardware Input Line status\&.  "
.ti -1c
.RI "static bool \fBget_button_body_ccw\fP (void)"
.br
.RI "This function returns the Manual Body-CCW Hardware Input Line status\&.  "
.ti -1c
.RI "static bool \fBget_button_slide_up_stat\fP (void)"
.br
.RI "This function returns the Manual Slide-Up Hardware Input Line status\&.  "
.ti -1c
.RI "static bool \fBget_button_slide_down_stat\fP (void)"
.br
.RI "This function returns the Manual Slide-Down Hardware Input Line status\&.  "
.ti -1c
.RI "static bool \fBgetXrayPushButtonStat\fP (void)"
.br
.RI "This method returns the current status of the X-RAY push button activation status\&.  "
.ti -1c
.RI "static void \fBsetXrayEna\fP (bool stat)"
.br
.RI "This method requests to activate the x-ray enable hardware signal on the generator external interface\&.  "
.ti -1c
.RI "static void \fBsetBuzzerManualMode\fP (bool stat)"
.br
.RI "This method sets the working mode of the Buzzer in Manual Mode or Automatic Mode  "
.ti -1c
.RI "static void \fBactivationManualBuzzer\fP (bool stat)"
.br
.RI "This method, when the buzzer is set in manual mode, sets the current status of the Buzzer device\&.  "
.ti -1c
.RI "static \fBCanDeviceCommandResult\fP ^ \fBactivateManualBuzzerTomoMode\fP (int samples, int fps, int tmo, Object^ \fBdevice\fP)"
.br
.RI "This method, when the buzzer is set in manual mode, activates the buzzer in Tomo mode, providing a given number of consecutive pulses at a given rate\&.  "
.ti -1c
.RI "static void \fBset_manual_rot_ena_led\fP (bool stat)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBPCB301\fP ^ \fBdevice\fP = gcnew \fBPCB301\fP()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBrunningLoop\fP (void) override"
.br
.RI "
.PP
.RS 4
This is the current status of the Manual Slide-Down input line 
.RE
.PP
"
.ti -1c
.RI "void \fBdemoLoop\fP (void) override"
.br
.RI "This is the Demo Loop overriden procedure\&. "
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "enum class \fBStatusRegisters\fP { \fBSYSTEM_STATUS_REGISTER\fP = 0, \fBBATTERY_STATUS_REGISTER\fP }"
.br
.RI "This is the Device STATUS Register implementation  "
.ti -1c
.RI "enum class \fBDataRegisters\fP { \fBOUTPUTS_DATA_REGISTER\fP = 0 }"
.br
.RI "This is the Device DATA Register implementation  "
.ti -1c
.RI "enum class \fBCommandregister\fP { \fBABORT_COMMAND\fP = 0, \fBACTIVATE_SOFT_POWEROFF\fP, \fBACTIVATE_DEMO_TOMO\fP }"
.br
.RI "
.br
 This enumeration class defines the Indexes of the Command Execution "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBhandleSystemStatusRegister\fP (void)"
.br
.ti -1c
.RI "void \fBhandleBatteryStatusRegister\fP (void)"
.br
.ti -1c
.RI "void \fBtoggleKeepalive\fP (void)"
.br
.ti -1c
.RI "void \fBevaluateEvents\fP (void)"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static \fBRegister\fP ^ \fBoutputs_data_register\fP = gcnew \fBRegister\fP()"
.br
.ti -1c
.RI "static \fBdoor_options\fP \fBdoor_status\fP = \fBdoor_options::OPEN_DOOR\fP"
.br
.RI "This is the current status of the Study door\&. "
.ti -1c
.RI "static bool \fBpower_down_status\fP = false"
.br
.RI "Current Powerdown Status\&. "
.ti -1c
.RI "static bool \fBemergency_status\fP = false"
.br
.RI "Current Emergency Status\&. "
.ti -1c
.RI "static bool \fBcabinet_safety_status\fP = false"
.br
.RI "The Cabinet safety input status\&. "
.ti -1c
.RI "static bool \fBmotor_safety_switch\fP = false"
.br
.RI "Safety switch of the 48V status\&. "
.ti -1c
.RI "static bool \fBmotor_48V_ok\fP = false"
.br
.RI "Feedback from the motor power supply\&. "
.ti -1c
.RI "static bool \fBcompression_on_status\fP = false"
.br
.RI "Actual compression signal\&. "
.ti -1c
.RI "static bool \fBburning_jumper_present\fP = false"
.br
.RI "Burning jumper present in the system\&. "
.ti -1c
.RI "static bool \fBsoft_power_off_request\fP = false"
.br
.RI "A power Off sequence is requested\&. "
.ti -1c
.RI "static bool \fBpower_lock_status\fP = false"
.br
.RI "The power supply lock condition (for programming) "
.ti -1c
.RI "static bool \fBbattery_enabled_status\fP = false"
.br
.RI "Battery enabled system button status\&. "
.ti -1c
.RI "static bool \fBbatt1_low_alarm\fP = false"
.br
.RI "Low voltage of battery 1\&. "
.ti -1c
.RI "static bool \fBbatt2_low_alarm\fP = false"
.br
.RI "Low voltage of battery 2\&. "
.ti -1c
.RI "static unsigned char \fBvoltage_batt1\fP = 0"
.br
.RI "10 * voltage level of battery 1 "
.ti -1c
.RI "static unsigned char \fBvoltage_batt2\fP = 0"
.br
.RI "10 * voltage level of battery 2 "
.ti -1c
.RI "static bool \fBxray_push_button\fP = false"
.br
.ti -1c
.RI "static bool \fBpedal_up_stat\fP = false"
.br
.RI "
.PP
.RS 4
This is the current X-RAY status 
.RE
.PP
"
.ti -1c
.RI "static bool \fBpedal_down_stat\fP = false"
.br
.RI "
.PP
.RS 4
This is the current status of the Pedal Board - Vertical Up input line 
.RE
.PP
"
.ti -1c
.RI "static bool \fBcmp_up_stat\fP = false"
.br
.RI "
.PP
.RS 4
This is the current status of the Pedal Board - Vertical Down input line 
.RE
.PP
"
.ti -1c
.RI "static bool \fBcmp_down_stat\fP = false"
.br
.RI "
.PP
.RS 4
This is the current status of the Pedal Board - Compressor Up input line 
.RE
.PP
"
.ti -1c
.RI "static bool \fBbutton_arm_cw_stat\fP = false"
.br
.RI "
.PP
.RS 4
This is the current status of the Pedal Board - Compressor Down input line 
.RE
.PP
"
.ti -1c
.RI "static bool \fBbutton_arm_ccw_stat\fP = false"
.br
.RI "
.PP
.RS 4
This is the current status of the Manual Keypad - Arm CW input line 
.RE
.PP
"
.ti -1c
.RI "static bool \fBbutton_up_stat\fP = false"
.br
.RI "
.PP
.RS 4
This is the current status of the Manual Keypad - Arm CCW input line 
.RE
.PP
"
.ti -1c
.RI "static bool \fBbutton_down_stat\fP = false"
.br
.RI "
.PP
.RS 4
This is the current status of the Manual Keypad - Vertical Up input line 
.RE
.PP
"
.ti -1c
.RI "static bool \fBbutton_body_cw\fP = false"
.br
.RI "
.PP
.RS 4
This is the current status of the Manual Keypad - Vertical Down input line 
.RE
.PP
"
.ti -1c
.RI "static bool \fBbutton_body_ccw\fP = false"
.br
.RI "
.PP
.RS 4
This is the current status of the Manual Body-CW input line 
.RE
.PP
"
.ti -1c
.RI "static bool \fBbutton_slide_up_stat\fP = false"
.br
.RI "
.PP
.RS 4
This is the current status of the Manual Body-CCW input line 
.RE
.PP
"
.ti -1c
.RI "static bool \fBbutton_slide_down_stat\fP = false"
.br
.RI "
.PP
.RS 4
This is the current status of the Manual Slide-Up input line 
.RE
.PP
"
.in -1c
.SS "Additional Inherited Members"
.SH "Member Enumeration Documentation"
.PP 
.SS "enum class \fBPCB301::Commandregister\fP\fC [strong]\fP, \fC [private]\fP"

.PP

.br
 This enumeration class defines the Indexes of the Command Execution 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIABORT_COMMAND \fP\fP
Abort Command (mandatory as for device protocol) 
.TP
\fB\fIACTIVATE_SOFT_POWEROFF \fP\fP
Soft power off activation\&. 
.TP
\fB\fIACTIVATE_DEMO_TOMO \fP\fP
Buzzer pulse for tomo 
.br
 
.SS "enum class \fBPCB301::DataRegisters\fP\fC [strong]\fP, \fC [private]\fP"

.PP
This is the Device DATA Register implementation  
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIOUTPUTS_DATA_REGISTER \fP\fP
.SS "enum class \fBPCB301::door_options\fP\fC [strong]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICLOSED_DOOR \fP\fP
.TP
\fB\fIOPEN_DOOR \fP\fP
.SS "enum class \fBPCB301::StatusRegisters\fP\fC [strong]\fP, \fC [private]\fP"

.PP
This is the Device STATUS Register implementation  
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISYSTEM_STATUS_REGISTER \fP\fP
.TP
\fB\fIBATTERY_STATUS_REGISTER \fP\fP

.PP
.RS 4
This is the System Status register index 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "PCB301::PCB301 ()\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "void PCB301::demoLoop (void)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
This is the Demo Loop overriden procedure\&. 
.PP
Reimplemented from \fBCanDeviceProtocol\fP\&.
.SS "void PCB301::evaluateEvents (void)\fC [private]\fP"

.SS "void PCB301::handleBatteryStatusRegister (void)\fC [private]\fP"

.SS "void PCB301::handleSystemStatusRegister (void)\fC [private]\fP"

.SS "void PCB301::runningLoop (void)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP

.PP
.RS 4
This is the current status of the Manual Slide-Down input line 
.RE
.PP
This is the Running Loop overriden procedure 
.PP
Reimplemented from \fBCanDeviceProtocol\fP\&.
.SS "static void PCB301::set_manual_rot_ena_led (bool stat)\fC [inline]\fP, \fC [static]\fP"

.SS "void PCB301::toggleKeepalive (void)\fC [private]\fP"

.SH "Member Data Documentation"
.PP 
.SS "bool PCB301::batt1_low_alarm = false\fC [static]\fP, \fC [private]\fP"

.PP
Low voltage of battery 1\&. 
.SS "bool PCB301::batt2_low_alarm = false\fC [static]\fP, \fC [private]\fP"

.PP
Low voltage of battery 2\&. 
.SS "bool PCB301::battery_enabled_status = false\fC [static]\fP, \fC [private]\fP"

.PP
Battery enabled system button status\&. 
.SS "bool PCB301::burning_jumper_present = false\fC [static]\fP, \fC [private]\fP"

.PP
Burning jumper present in the system\&. 
.SS "bool PCB301::button_arm_ccw_stat = false\fC [static]\fP, \fC [private]\fP"

.PP

.PP
.RS 4
This is the current status of the Manual Keypad - Arm CW input line 
.RE
.PP

.SS "bool PCB301::button_arm_cw_stat = false\fC [static]\fP, \fC [private]\fP"

.PP

.PP
.RS 4
This is the current status of the Pedal Board - Compressor Down input line 
.RE
.PP

.SS "bool PCB301::button_body_ccw = false\fC [static]\fP, \fC [private]\fP"

.PP

.PP
.RS 4
This is the current status of the Manual Body-CW input line 
.RE
.PP

.SS "bool PCB301::button_body_cw = false\fC [static]\fP, \fC [private]\fP"

.PP

.PP
.RS 4
This is the current status of the Manual Keypad - Vertical Down input line 
.RE
.PP

.SS "bool PCB301::button_down_stat = false\fC [static]\fP, \fC [private]\fP"

.PP

.PP
.RS 4
This is the current status of the Manual Keypad - Vertical Up input line 
.RE
.PP

.SS "bool PCB301::button_slide_down_stat = false\fC [static]\fP, \fC [private]\fP"

.PP

.PP
.RS 4
This is the current status of the Manual Slide-Up input line 
.RE
.PP

.SS "bool PCB301::button_slide_up_stat = false\fC [static]\fP, \fC [private]\fP"

.PP

.PP
.RS 4
This is the current status of the Manual Body-CCW input line 
.RE
.PP

.SS "bool PCB301::button_up_stat = false\fC [static]\fP, \fC [private]\fP"

.PP

.PP
.RS 4
This is the current status of the Manual Keypad - Arm CCW input line 
.RE
.PP

.SS "bool PCB301::cabinet_safety_status = false\fC [static]\fP, \fC [private]\fP"

.PP
The Cabinet safety input status\&. 
.SS "bool PCB301::cmp_down_stat = false\fC [static]\fP, \fC [private]\fP"

.PP

.PP
.RS 4
This is the current status of the Pedal Board - Compressor Up input line 
.RE
.PP

.SS "bool PCB301::cmp_up_stat = false\fC [static]\fP, \fC [private]\fP"

.PP

.PP
.RS 4
This is the current status of the Pedal Board - Vertical Down input line 
.RE
.PP

.SS "bool PCB301::compression_on_status = false\fC [static]\fP, \fC [private]\fP"

.PP
Actual compression signal\&. 
.SS "\fBPCB301\fP ^ PCB301::device = gcnew \fBPCB301\fP()\fC [static]\fP"

.SS "\fBdoor_options\fP PCB301::door_status = \fBdoor_options::OPEN_DOOR\fP\fC [static]\fP, \fC [private]\fP"

.PP
This is the current status of the Study door\&. 
.SS "bool PCB301::emergency_status = false\fC [static]\fP, \fC [private]\fP"

.PP
Current Emergency Status\&. 
.SS "bool PCB301::motor_48V_ok = false\fC [static]\fP, \fC [private]\fP"

.PP
Feedback from the motor power supply\&. 
.SS "bool PCB301::motor_safety_switch = false\fC [static]\fP, \fC [private]\fP"

.PP
Safety switch of the 48V status\&. 
.SS "\fBRegister\fP ^ PCB301::outputs_data_register = gcnew \fBRegister\fP()\fC [static]\fP, \fC [private]\fP"

.SS "bool PCB301::pedal_down_stat = false\fC [static]\fP, \fC [private]\fP"

.PP

.PP
.RS 4
This is the current status of the Pedal Board - Vertical Up input line 
.RE
.PP

.SS "bool PCB301::pedal_up_stat = false\fC [static]\fP, \fC [private]\fP"

.PP

.PP
.RS 4
This is the current X-RAY status 
.RE
.PP

.SS "bool PCB301::power_down_status = false\fC [static]\fP, \fC [private]\fP"

.PP
Current Powerdown Status\&. 
.SS "bool PCB301::power_lock_status = false\fC [static]\fP, \fC [private]\fP"

.PP
The power supply lock condition (for programming) 
.SS "bool PCB301::soft_power_off_request = false\fC [static]\fP, \fC [private]\fP"

.PP
A power Off sequence is requested\&. 
.SS "unsigned char PCB301::voltage_batt1 = 0\fC [static]\fP, \fC [private]\fP"

.PP
10 * voltage level of battery 1 
.SS "unsigned char PCB301::voltage_batt2 = 0\fC [static]\fP, \fC [private]\fP"

.PP
10 * voltage level of battery 2 
.SS "bool PCB301::xray_push_button = false\fC [static]\fP, \fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU_MASTER Software Description from the source code\&.
