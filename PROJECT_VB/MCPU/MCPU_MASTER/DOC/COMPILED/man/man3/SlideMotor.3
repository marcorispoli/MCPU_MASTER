.TH "SlideMotor" 3 "Thu May 2 2024" "MCPU_MASTER Software Description" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SlideMotor
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SlideMotor\&.h>\fP
.PP
Inherits \fBCANOPEN::CanOpenMotor\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSlideMotor\fP (void)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBstartManualHoming\fP (int target_position)"
.br
.ti -1c
.RI "static bool \fBstartAutoHoming\fP ()"
.br
.RI "This function activates the Automatic Homing procedure "
.ti -1c
.RI "static bool \fBserviceAutoPosition\fP (int pos)"
.br
.ti -1c
.RI "static bool \fBisoAutoPosition\fP (int pos)"
.br
.ti -1c
.RI "static bool \fBsetIdlePosition\fP (void)"
.br
.ti -1c
.RI "static bool \fBisAllowedPosition\fP (void)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBSlideMotor\fP ^ \fBdevice\fP = gcnew \fBSlideMotor\fP()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "unsigned short \fBinitializeSpecificObjectDictionaryCallback\fP (void) override"
.br
.RI "Sets specific registers for the Arm activation 
.br
 "
.ti -1c
.RI "void \fBcompletedCallback\fP (int id, \fBMotorCommands\fP \fBcurrent_command\fP, int current_position, \fBMotorCompletedCodes\fP term_code) override"
.br
.RI "This function is called just before to Power the motor phases\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "bool \fBiso_activation_mode\fP"
.br
.RI "Setting this flag, causes the Vertical motor activation at the Arm rotation completion\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "double \fBinit_angolo\fP"
.br
.ti -1c
.RI "double \fBlast_angolo\fP"
.br
.ti -1c
.RI "double \fBH0\fP"
.br
.ti -1c
.RI "double \fBH1\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static bool \fBmanual_up_direction\fP = false"
.br
.RI "Sets true if the UP manual command is executing, false if the DOWN manual activation is executing\&. "
.ti -1c
.RI "static bool \fBidle_positioning\fP = false"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "SlideMotor::SlideMotor (void)"

.SH "Member Function Documentation"
.PP 
.SS "void SlideMotor::completedCallback (int id, \fBMotorCommands\fP current_command, int current_position, \fBMotorCompletedCodes\fP term_code)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
This function is called just before to Power the motor phases\&. 
.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "unsigned short SlideMotor::initializeSpecificObjectDictionaryCallback (void)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Sets specific registers for the Arm activation 
.br
 
.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "static bool SlideMotor::isAllowedPosition (void)\fC [inline]\fP, \fC [static]\fP"

.SS "bool SlideMotor::isoAutoPosition (int pos)\fC [static]\fP"

.SS "bool SlideMotor::serviceAutoPosition (int pos)\fC [static]\fP"

.SS "bool SlideMotor::setIdlePosition (void)\fC [static]\fP"

.SS "bool SlideMotor::startAutoHoming (void)\fC [static]\fP"

.PP
This function activates the Automatic Homing procedure 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "bool SlideMotor::startManualHoming (int target_position)\fC [static]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBSlideMotor\fP ^ SlideMotor::device = gcnew \fBSlideMotor\fP()\fC [static]\fP"

.SS "double SlideMotor::H0\fC [private]\fP"

.SS "double SlideMotor::H1\fC [private]\fP"

.SS "bool SlideMotor::idle_positioning = false\fC [static]\fP, \fC [private]\fP"

.SS "double SlideMotor::init_angolo\fC [private]\fP"

.SS "bool SlideMotor::iso_activation_mode\fC [protected]\fP"

.PP
Setting this flag, causes the Vertical motor activation at the Arm rotation completion\&. 
.SS "double SlideMotor::last_angolo\fC [private]\fP"

.SS "bool SlideMotor::manual_up_direction = false\fC [static]\fP, \fC [private]\fP"

.PP
Sets true if the UP manual command is executing, false if the DOWN manual activation is executing\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU_MASTER Software Description from the source code\&.
