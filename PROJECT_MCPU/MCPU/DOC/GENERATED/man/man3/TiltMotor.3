.TH "TiltMotor" 3 "Mon Sep 30 2024" "MCPU" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TiltMotor \- This is the Tilt Module class implementation 

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <TiltMotor\&.h>\fP
.PP
Inherits \fBCANOPEN::CanOpenMotor\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum class \fBtarget_options\fP { \fBSCOUT\fP = 0, \fBBP_R\fP, \fBBP_L\fP, \fBTOMO_H\fP, \fBTOMO_E\fP, \fBUNDEF\fP }"
.br
.RI "This is the enumeration class defining the target position external interface "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTiltMotor\fP (void)"
.br
.RI "This is the Tilt Motor class constructor "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBstartManualHoming\fP (int target_position)"
.br
.ti -1c
.RI "static bool \fBstartAutoHoming\fP ()"
.br
.RI "This function activates the Automatic Homing procedure "
.ti -1c
.RI "static bool \fBactivateTomoScan\fP (int pos, int speed, int acc, int dec)"
.br
.RI "This function activates the Tomo Scan rotation mode\&. "
.ti -1c
.RI "static bool \fBserviceAutoPosition\fP (int pos)"
.br
.ti -1c
.RI "static bool \fBsetIdlePosition\fP (void)"
.br
.ti -1c
.RI "static bool \fBsetTarget\fP (\fBtarget_options\fP tg, int id)"
.br
.RI "This function executes a TRX activation to a predefined target\&. "
.ti -1c
.RI "static bool \fBisScoutPosition\fP (void)"
.br
.RI "This function returns true if the current TRX angle is into the +/- 1° range\&. "
.ti -1c
.RI "static \fBtarget_options\fP \fBgetTargetPosition\fP (void)"
.br
.RI "This function returns the current TRX target position\&. "
.ti -1c
.RI "static \fBtarget_options\fP \fBgetTargetCode\fP (System::String^ strtg)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "literal int \fBSCOUT_POSITION\fP = 0"
.br
.RI "This is the Scout angle position\&. "
.ti -1c
.RI "literal int \fBBP_R_POSITION\fP = 1500"
.br
.RI "This is the \fBBiopsy\fP Right position\&. "
.ti -1c
.RI "literal int \fBBP_L_POSITION\fP = \-1500"
.br
.RI "This is the \fBBiopsy\fP left position\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBTiltMotor\fP ^ \fBdevice\fP = gcnew \fBTiltMotor\fP()"
.br
.RI "This is the pointer to the Base Class functions\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "unsigned short \fBinitializeSpecificObjectDictionaryCallback\fP (void) override"
.br
.RI "Override this function to initialize specific registers of the target Motor Device\&. "
.ti -1c
.RI "\fBMotorCompletedCodes\fP \fBpreparationCallback\fP (\fBMotorCommands\fP current_command, int current_position, int target_position) override"
.br
.RI "This function is called just before to set the speed: if return true, the speed is set to the predefined value\&. "
.ti -1c
.RI "void \fBcompletedCallback\fP (int id, \fBMotorCommands\fP current_command, int current_position, \fBMotorCompletedCodes\fP term_code) override"
.br
.RI "This function is called just before to Power the motor phases\&. "
.ti -1c
.RI "\fBMotorCompletedCodes\fP \fBidleCallback\fP (void) override"
.br
.RI "The module overrides this function in order to handle the IDLE activities\&. "
.ti -1c
.RI "void \fBresetCallback\fP (void) override"
.br
.RI "This is the override callback called in case of Motor Device reset event\&. "
.ti -1c
.RI "bool \fBbrakeCallback\fP (void) override"
.br
.RI "This callback is called by the base class when the brake device shall be locked\&. "
.ti -1c
.RI "bool \fBunbrakeCallback\fP (void) override"
.br
.RI "This callback is called by the base class when the brake device shall be unlocked\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This is the Tilt Module class implementation
.SH "Member Enumeration Documentation"
.PP 
.SS "enum class \fBTiltMotor::target_options\fP\fC [strong]\fP"

.PP
This is the enumeration class defining the target position external interface 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISCOUT \fP\fP
TRX in scout position\&. 
.TP
\fB\fIBP_R \fP\fP
TRX in \fBBiopsy\fP Right position\&. 
.TP
\fB\fIBP_L \fP\fP
TRX in \fBBiopsy\fP Left position\&. 
.TP
\fB\fITOMO_H \fP\fP
TRX in Tomo Home position\&. 
.TP
\fB\fITOMO_E \fP\fP
TRX in Tomo End position\&. 
.TP
\fB\fIUNDEF \fP\fP
TRX in not predefined target\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "TiltMotor::TiltMotor (void)"

.PP
This is the Tilt Motor class constructor The constructor initializes the Base class with the motor address, gear ratio and the direction logic\&.
.PP
The Tilt motor makes use of the nanoj program for the Tomo exposures so the constructor passes the nano-j program vector pointer to the base class in order to be uploaded at the startup\&.
.PP
The Encoder is initialized with the stored value in the configuration file:
.IP "\(bu" 2
in case the position should be invalid, the error Notify::messages::ERROR_TILT_MOTOR_HOMING is activated;
.IP "\(bu" 2
in case of error, the zero setting shall be executed before any activation may take place\&.
.PP

.SH "Member Function Documentation"
.PP 
.SS "bool TiltMotor::activateTomoScan (int pos, int speed, int acc, int dec)\fC [static]\fP"

.PP
This function activates the Tomo Scan rotation mode\&. The Tomo scan rotation mode starts when the Digital Input-1 is triggered high\&.
.PP
The Digital Input 1 is assigned to the Exp-Win signal coming from the detector
.PP
\fBParameters\fP
.RS 4
\fIpos\fP Target position in User units
.br
\fIspeed\fP Speed in user units
.br
\fIacc\fP Acceleration in User units
.br
\fIdec\fP Deceleration in user units
.RE
.PP
\fBReturns\fP
.RS 4
true if the command successfully started
.RE
.PP

.SS "bool TiltMotor::brakeCallback (void)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
This callback is called by the base class when the brake device shall be locked\&. Usually when the activation termines, before to release the motor power torque the brake device shall lock the shaft\&.
.PP
\fBReturns\fP
.RS 4
true if the brake correctly locks
.RE
.PP

.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "void TiltMotor::completedCallback (int id, \fBMotorCommands\fP current_command, int current_position, \fBMotorCompletedCodes\fP term_code)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
This function is called just before to Power the motor phases\&. 
.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "static \fBtarget_options\fP TiltMotor::getTargetPosition (void)\fC [inline]\fP, \fC [static]\fP"

.PP
This function returns the current TRX target position\&. NOTE: The target position is not the Encoder angle\&. the target shall be set with the \fBsetTarget()\fP function\&.
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "\fBTiltMotor::MotorCompletedCodes\fP TiltMotor::idleCallback (void)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
The module overrides this function in order to handle the IDLE activities\&. In Idle status the module:
.IP "\(bu" 2
test the brake device activity;
.IP "\(bu" 2
monitors the safety conditions;
.IP "\(bu" 2
monitors the manual activation inputs;
.PP
.PP
\fBReturns\fP
.RS 4
\fBMotorCompletedCodes::COMMAND_PROCEED\fP in case of ready conditon 
.RE
.PP

.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "unsigned short TiltMotor::initializeSpecificObjectDictionaryCallback (void)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
Override this function to initialize specific registers of the target Motor Device\&. 
.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "static bool TiltMotor::isScoutPosition (void)\fC [inline]\fP, \fC [static]\fP"

.PP
This function returns true if the current TRX angle is into the +/- 1° range\&. The SCOUT position is a safer position for the \fBGantry\fP rotations (ARM MOTOR, SLIDE MOTOR)\&. 
.PP
.nf
NOTE: If the TRX should not be in SCOUT the ARM and the SLIDE motors cannot be activated!

.fi
.PP
 If the TRX encoder shouldn't be initialized (not zero setting performed) the result is always false!\&.
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "\fBTiltMotor::MotorCompletedCodes\fP TiltMotor::preparationCallback (\fBMotorCommands\fP current_command, int current_position, int target_position)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
This function is called just before to set the speed: if return true, the speed is set to the predefined value\&. 
.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "void TiltMotor::resetCallback (void)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
This is the override callback called in case of Motor Device reset event\&. In case the device should reset after the initialization, the initialization process shall restart again\&.
.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.
.SS "bool TiltMotor::setTarget (\fBtarget_options\fP tg, int id)\fC [static]\fP"

.PP
This function executes a TRX activation to a predefined target\&. The allowed target for this command are:
.IP "\(bu" 2
SCOUT: this is 0°;
.IP "\(bu" 2
BP_R: (biopsy right) this is +15°;
.IP "\(bu" 2
BP_L: (biopsy left) this is -15°;
.IP "\(bu" 2
TOMO_H: (tomo home) it depends by the current tomo configuration selected;
.IP "\(bu" 2
TOMO_E: (tomo end) it depends by the current tomo configuration selected;
.PP
.PP
\fBParameters\fP
.RS 4
\fItg\fP this is the target option code
.br
\fIid\fP this is the aws command identifier
.RE
.PP
\fBReturns\fP
.RS 4
true if the target is successfully set
.RE
.PP

.SS "bool TiltMotor::startAutoHoming (void)\fC [static]\fP"

.PP
This function activates the Automatic Homing procedure 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "bool TiltMotor::unbrakeCallback (void)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.PP
This callback is called by the base class when the brake device shall be unlocked\&. The base class calls this callback after the motor torque is applied and before to start the rotation\&.
.PP
The callback tests the effective unlocking condition\&.
.PP
\fBReturns\fP
.RS 4
true if the brake device is correctly unlocked
.RE
.PP

.PP
Reimplemented from \fBCANOPEN::CanOpenMotor\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU from the source code\&.
