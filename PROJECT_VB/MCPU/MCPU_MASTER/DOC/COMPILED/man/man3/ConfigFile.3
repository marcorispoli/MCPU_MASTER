.TH "ConfigFile" 3 "Wed May 29 2024" "MCPU_MASTER Software Description" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ConfigFile \- This class handles the configuration file management\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ConfigFile\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBfileDescriptorT\fP"
.br
.RI "Configuration file descriptor\&. "
.ti -1c
.RI "class \fBparamItemT\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConfigFile\fP (System::String^ \fBfilename\fP, int \fBrevision\fP, cli::array< \fBparamItemT\fP^>^ descriptor)"
.br
.ti -1c
.RI "bool \fBloadFile\fP (void)"
.br
.RI "Load the configuration file in memory\&. "
.ti -1c
.RI "void \fBstoreFile\fP (void)"
.br
.RI "Stores the memory content of the configuration file into the file\&. "
.ti -1c
.RI "void \fBsetDefaultFile\fP (void)"
.br
.RI "Override thecurrent file with the default values\&. "
.ti -1c
.RI "System::String ^ \fBgetFilename\fP (void)"
.br
.ti -1c
.RI "bool \fBisWarning\fP (void)"
.br
.ti -1c
.RI "System::String ^ \fBgetWarningString\fP (void)"
.br
.ti -1c
.RI "cli::array< System::String^> ^ \fBgetParam\fP (System::String^ tag)"
.br
.ti -1c
.RI "bool \fBsetParam\fP (System::String^ tag, int index, System::String^ val)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual bool \fBrevisionChangeCallback\fP (void)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "int \fBgetTagPosition\fP (System::String^ tag)"
.br
.RI "getTagPosition Get the index position of a given tag in the memory structure "
.ti -1c
.RI "System::String ^ \fBgetConfigPath\fP (void)"
.br
.ti -1c
.RI "void \fBcreateDefaultFile\fP (void)"
.br
.RI "Creates the default file based on the template\&. "
.ti -1c
.RI "bool \fBdecodeLine\fP (System::String^ rline)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "cli::array< \fBparamItemT\fP^> ^ \fBdata\fP"
.br
.RI "config file content in memory 
.br
 "
.ti -1c
.RI "System::String ^ \fBfilename\fP"
.br
.RI "Configuration filename\&. "
.ti -1c
.RI "int \fBrevision\fP"
.br
.RI "Configuration revision code 
.br
 "
.ti -1c
.RI "int \fBloaded_revision\fP"
.br
.RI "Revision read from the config file\&. "
.ti -1c
.RI "bool \fBwarning\fP"
.br
.ti -1c
.RI "System::String ^ \fBwarning_string\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class handles the configuration file management\&. 


.SH "ABSTRACT"
.PP
The configuration file is a special file with a proper format: a string based file with TAGS and a variable set of parameters\&.
.PP
The basic characteristics are:
.PP
.IP "\(bu" 2
A Readable Text file format;
.IP "\(bu" 2
A robust data structure and access data interface, preventing data corruption;
.IP "\(bu" 2
Comment strings inside the file allow the readability;
.IP "\(bu" 2
Etherogeneous data content: all data are in string format convertible to any kind of data types\&.
.IP "\(bu" 2
File revision management\&.
.PP
.SH "FILE DATA FORMAT"
.PP
The file is composed of several string lines, each one handling a given parameter with a list of values\&.
.PP
Each parameter is defined by a static string as a TAG identifier\&. The following string show the data format: 
.PP
.nf
  # Comment line \&.\&.\&.\&.\&.\&.
  <TAG,PARAM1, PARAM2, PARAM3,\&.\&.\&.\&., PARAM-N>

  where:
  - # is a comment initiator: every character following the '#' is interpreted as a comment line\&.
  - TAG: is a unique string identifier\&. This string shall be used in the code in order to point to a parameter\&.
  - PARAM1, \&.\&., PARAM-N: are strings separated by commas, representing the parameter content,
    splitted in a list of etherogeneus values in string format\&.
.fi
.PP
.PP
A special TAG = 'REVISION' is reserved to store the file revision code in the file\&. This tag is used to determines if the configuration file is at the correct revision when the application accesses the file\&. A virtual configFile::revisionChangeCallback() function is called in case a wrong revision should be detected\&.
.SH "USAGE"
.PP
The application shall subclass this class in order to create a specific configuration file\&.
.PP
In the constructor of the subclass the application shall pass a static structure defining the configFile::fileDescriptorT of the configuration file\&. The fileDescriptor content defines:
.IP "\(bu" 2
The list of available parameter TAGS;
.IP "\(bu" 2
The default content of every parameter;
.IP "\(bu" 2
The description string assigned to every parameter;
.PP
.PP
This is a tipical valid declaration: 
.PP
.nf
    class yourConfigClass: public configFile
    {
        public:


        #define REVISION     1  // This is the revision code
        #define CONFIG_FILENAME     'C:\\\\Users\\\\\&.\&.\&.\&.\&.\\\\your_config_file' // This is the configuration file name and path

        // This section defines labels helping the param identification along the application
        #define NAME_TAG_1   'NAME_TAG_1'
        #define NAME_TAG_2   'NAME_TAG_2'
        \&.\&.\&.\&.
        #define NAME_TAG_K   'NAME_TAG_K'

        // your class constructor
        yourConfigClass():configFile( (const configFile::fileDescriptorT)
            {
                CONFIG_FILENAME, REVISION,
                {{
                    { NAME_TAG_1,     {{ VAL_1_1, \&.\&.\&. , VAL_1_N }},  'Description string tag 1'},
                    { NAME_TAG_2,     {{ VAL_2_1, \&.\&.\&. , VAL_2_O }},  'Description string tag 2'},
                    { NAME_TAG_K,     {{ VAL_K_1, \&.\&.\&. , VAL_K_P }},  'Description string tag K'},
                }}
            })
        {
            // Your constructor code \&.\&.\&.
            this->loadFile();
        };


    }; // End class definition

.fi
.PP
 Override the configFile::revisionChangeCallback() function to customize the
.br
 default change revision callback 
.PP
.nf
     bool yourConfigClass::changeRevisionCallback(int file_rev, int config_rev){

     // your code here \&.\&.\&.\&.\&.

     return true; // if you want to store the file at the end
     return false; // to prevent the file storing
    }
.fi
.PP
.PP
As the previous code example shows, the class declaration needs a 'descriptor' structure, configFile::fileDescriptorT, that uniquelly defines the content of the configuration file\&.
.PP
When the configuration file will be instantiated for the first time, a configuration file called 'your_config_file' will be created with the default values taken from the configFile::fileDescriptor\&.
.PP
Further instantiation of the class will not modifies the content of the file\&.
.PP
After instantiation, the memory content will be filled with the default values\&.
.br
 In order to update the memory content with the current file content, 
.br
 the application shall explicitely call the configFile::loadFile() method\&.
.PP
In case the file content should have some wrong formatted parameter line, or some of the tag should not be present,
.br
 the wrong formatted lines will be removed from the file and the missing parameters
.br
 will be replaced with the default values\&. The file then will be rigenerated with the corrected format\&.
.PP
To access the configuration data content, the application shall use the following methods: 
.PP
.nf
 *
   // class instantiation in some part of the code
   yourConfigClass config;

   // Optionally the application shall load the content in memory
   // (if this as not been done in the yourConfigClass constructor yet)
   config\&.loadFile();

   // Access to a whole value list of a parameter
   paramItemT param = getParam('NAME_TAG_1');
     // param\&.tag: is the tag of the parameter;
     // param\&.values\&.at(i): is the i-value of the value list in string format

   // Access to the first element of the value's list of a parameter
   int val = getParam<int>('NAME_TAG_1', 0);


   // Setting the n-value value of a given param:
   setParam<int>('NAME_TAG_1',index); // For integers
   setParam<float>('NAME_TAG_1',index); // For floats
   \&.\&.\&.\&.\&.
   setParam<QString>('NAME_TAG_1',index); // For strings
.fi
.PP
.PP
In all of the previous access methods, the application shall
.br
 check the valid data access in order to proceed\&. See configFile::isAccess()
.PP
The class takes a copy of the loaded file\&. After content modifications with the \fBsetParam()\fP method, the application can restore the original content using the public method configFile::restoreContent()\&. This methode doesn't change the file in the file system, but restore te content in memory\&. In order to restore the file the application should call both methods:
.IP "\(bu" 2
configFile::restoreContent();
.IP "\(bu" 2
configFile::storeFile();
.PP
.PP
The application can load the file, store the file, reset to default value the file with the following public methods:
.IP "\(bu" 2
configFile::loadFile();
.IP "\(bu" 2
configFile::storeFile();
.IP "\(bu" 2
configFile::setDefaultFile(); 
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "ConfigFile::ConfigFile (System::String^ filename, int revision, cli::array< \fBparamItemT\fP^>^ descriptor)"

.SH "Member Function Documentation"
.PP 
.SS "void ConfigFile::createDefaultFile (void)\fC [private]\fP"

.PP
Creates the default file based on the template\&. 
.SS "bool ConfigFile::decodeLine (System::String^ rline)\fC [private]\fP"

.SS "System::String ConfigFile::getConfigPath (void)\fC [private]\fP"

.SS "System::String ^ ConfigFile::getFilename (void)\fC [inline]\fP"

.SS "cli::array< System::String^> ^ ConfigFile::getParam (System::String^ tag)\fC [inline]\fP"

.SS "int ConfigFile::getTagPosition (System::String^ tag)\fC [private]\fP"

.PP
getTagPosition Get the index position of a given tag in the memory structure 
.PP
\fBParameters\fP
.RS 4
\fItag\fP tag name 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "System::String ^ ConfigFile::getWarningString (void)\fC [inline]\fP"

.SS "bool ConfigFile::isWarning (void)\fC [inline]\fP"

.SS "bool ConfigFile::loadFile (void)"

.PP
Load the configuration file in memory\&. 
.SS "virtual bool ConfigFile::revisionChangeCallback (void)\fC [inline]\fP, \fC [protected]\fP, \fC [virtual]\fP"

.SS "void ConfigFile::setDefaultFile (void)\fC [inline]\fP"

.PP
Override thecurrent file with the default values\&. 
.SS "bool ConfigFile::setParam (System::String^ tag, int index, System::String^ val)\fC [inline]\fP"

.SS "void ConfigFile::storeFile (void)"

.PP
Stores the memory content of the configuration file into the file\&. 
.SH "Member Data Documentation"
.PP 
.SS "cli::array<\fBparamItemT\fP^> ^ ConfigFile::data\fC [private]\fP"

.PP
config file content in memory 
.br
 
.SS "System::String ^ ConfigFile::filename\fC [private]\fP"

.PP
Configuration filename\&. 
.SS "int ConfigFile::loaded_revision\fC [private]\fP"

.PP
Revision read from the config file\&. 
.SS "int ConfigFile::revision\fC [private]\fP"

.PP
Configuration revision code 
.br
 
.SS "bool ConfigFile::warning\fC [private]\fP"

.SS "System::String ^ ConfigFile::warning_string\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for MCPU_MASTER Software Description from the source code\&.
